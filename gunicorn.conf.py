"""
Configuration Gunicorn optimis√©e pour Render - Anti SIGKILL
"""

import os
import multiprocessing

# Configuration de base
bind = f"0.0.0.0:{os.getenv('PORT', 5000)}"
workers = int(os.getenv('WEB_CONCURRENCY', 1))
threads = 1
worker_class = "sync"
worker_connections = 1000

# Timeouts optimis√©s pour √©viter les SIGKILL
timeout = 120
keepalive = 2
graceful_timeout = 30

# Limitation des requ√™tes pour √©viter l'accumulation m√©moire
max_requests = 200
max_requests_jitter = 50

# Pr√©chargement pour optimiser les performances
preload_app = True

# Logging optimis√©
accesslog = "-"
errorlog = "-"
loglevel = "info"
access_log_format = '%(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s" %(D)s'

# Variables d'environnement pour la m√©moire
raw_env = [
    'PYTHONUNBUFFERED=1',
    'PYTHONDONTWRITEBYTECODE=1',
]

# Configuration m√©moire
worker_tmp_dir = "/dev/shm" if os.path.exists("/dev/shm") else None

# Limitation des processus enfants
worker_max_requests_jitter = 50

# Configuration pour √©viter les fuites m√©moire
def when_ready(server):
    """Callback appel√© quand le serveur est pr√™t"""
    server.log.info("üöÄ Serveur Gunicorn optimis√© d√©marr√©")

def worker_int(worker):
    """Callback appel√© lors de l'interruption d'un worker"""
    worker.log.info("‚ö†Ô∏è Worker interrompu - nettoyage en cours")

def pre_fork(server, worker):
    """Callback appel√© avant le fork d'un worker"""
    server.log.info(f"üîÑ D√©marrage worker {worker.pid}")

def post_fork(server, worker):
    """Callback appel√© apr√®s le fork d'un worker"""
    server.log.info(f"‚úÖ Worker {worker.pid} d√©marr√©")

def worker_abort(worker):
    """Callback appel√© lors de l'abandon d'un worker"""
    worker.log.info(f"‚ùå Worker {worker.pid} abandonn√©")