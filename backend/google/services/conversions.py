"""
Service de conversions Google Ads - Gestion des conversions Contact et Itin√©raires
Version finale avec correction de l'it√©ration
"""

import logging
from typing import Tuple, List, Dict, Any
from google.ads.googleads.errors import GoogleAdsException

from backend.google.services.authentication import GoogleAdsAuthService
from backend.common.services.google_sheets import GoogleSheetsService

class GoogleAdsConversionsService:
    """Service pour g√©rer les conversions Google Ads"""
    
    def __init__(self):
        self.auth_service = GoogleAdsAuthService()
        self.sheets_service = GoogleSheetsService()
        
        # Noms des conversions √† chercher (insensible √† la casse)
        # √âtendus pour couvrir plus de cas
        self.TARGET_CONTACT_NAMES = [
            "appels",
            "cta", 
            "appel (cta)",
            "clicks to call",
            "contact",
            "call",
            "phone"
        ]
        
        self.TARGET_DIRECTIONS_NAMES = [
            "itin√©raires",
            "local actions - directions", 
            "itin√©raires magasin",
            "click map",
            "directions",
            "local actions",
            "store visits"
        ]
        
        self.CRYOLIPOLYSE_CONTACT_NAMES = [
            "appels",
            "cta"
        ]
        
        self.ADDARIO_DIRECTIONS_NAMES = [
            "itin√©raires",
            "local actions - directions"
        ]
        
        self.CROZATIER_CONTACT_NAMES = [
            "appels",
            "clicks to call"
        ]
        
        self.DENTEVA_CONTACT_NAMES = [
            "action de conversion",
            "appels"
        ]
        
        self.DENTEVA_DIRECTIONS_NAMES = [
            "itin√©raires",
            "click map",
            "local actions - directions"
        ]
        
        self.EVOPRO_CONTACT_NAMES = [
            "action de conversion",
            "appel (cta)",
            "cta",
            "clicks to call",
            "appels",
            "appel (footer)"
        ]
        
        self.EVOPRO_DIRECTIONS_NAMES = [
            "itin√©raires",
            "local actions - directions"
        ]
        
        self.FRANCE_LITERIE_AIX_CONTACT_NAMES = [
            "appels",
            "cta"
        ]
        
        self.FRANCE_LITERIE_AIX_DIRECTIONS_NAMES = [
            "itin√©raires",
            "local actions - directions"
        ]
        
        self.FRANCE_LITERIE_ANNEMASSE_CONTACT_NAMES = [
            "appels",
            "clicks to call"
        ]
        
        self.FRANCE_LITERIE_ANNEMASSE_DIRECTIONS_NAMES = [
            "itin√©raires",
            "local actions - directions"
        ]
        
        self.FRANCE_LITERIE_DIJON_CONTACT_NAMES = [
            "appels",
            "cta"
        ]
        
        self.FRANCE_LITERIE_DIJON_DIRECTIONS_NAMES = [
            "itin√©raires magasin",
        ]
        
        self.FRANCE_LITERIE_NARBONNE_CONTACT_NAMES = [
            "appels",
            "clicks to call"
        ]
        
        self.FRANCE_LITERIE_NARBONNE_DIRECTIONS_NAMES = [
            "itin√©raires",
            "local actions - directions",
            "itin√©raires magasin"
        ]
        
        self.FRANCE_LITERIE_PERPIGNAN_CONTACT_NAMES = [
            "appels",
            "clicks to call"
        ]
        
        self.FRANCE_LITERIE_PERPIGNAN_DIRECTIONS_NAMES = [
            "itin√©raires",
            "local actions - directions"
        ]
        
        self.KALTEA_AUBAGNE_CONTACT_NAMES = [
            "appels directs",
            "appels directs via google maps pour une campagne intelligente",
            "appels directs via l'annonce d'une campagne intelligente",
            "appels",
            "profil de l'√©tablissement - appel"
        ]
        
        self.KALTEA_AUBAGNE_DIRECTIONS_NAMES = [
            "itin√©raires",
            "itin√©raires magasin",
            "itin√©raires google maps d'une campagne intelligente"
        ]
        
        self.KALTEA_CHALON_CONTACT_NAMES = [
            "clicks to call",
            "appels"
        ]
        
        self.KALTEA_CHALON_DIRECTIONS_NAMES = [
            "local actions - directions",
            "itin√©raires magasin"
        ]
        
        self.KALTEA_LYON_CONTACT_NAMES = [
            "clicks to call",
            "appels"
        ]
        
        self.KALTEA_LYON_DIRECTIONS_NAMES = [
            "local actions - directions",
            "itin√©raire"
        ]
        
        self.LASEREL_CONTACT_NAMES = [
            "appels",
            "clicks to call",
            "appel (cta)",
            "cta"
        ]
        
        self.LASEREL_DIRECTIONS_NAMES = [
            "actions locales ‚Äì itin√©raire"
        ]
        
        self.STAR_LITERIE_CONTACT_NAMES = [
            "appels",
            "clicks to call",
            "cta"
        ]
        
        self.STAR_LITERIE_DIRECTIONS_NAMES = [
            "itin√©raires",
            "local actions - directions",
            "itin√©raires magasin"
        ]
        
        self.TOUSALON_PERPIGNAN_CONTACT_NAMES = [
            "appels"
        ]
        
        self.TOUSALON_PERPIGNAN_DIRECTIONS_NAMES = [
            "local actions - directions"
        ]
        
        self.TOUSALON_TOULOUSE_CONTACT_NAMES = [
            "appels",
            "clicks to call"
        ]
        
        self.TOUSALON_TOULOUSE_DIRECTIONS_NAMES = [
            "itin√©raire",
            "local actions - directions"
        ]
        
        self.BEDROOM_CONTACT_NAMES = [
            "call bouton",
            "clicks to call"
        ]
        
        self.BEDROOM_DIRECTIONS_NAMES = [
            "itin√©raires",
            "local actions - directions"
        ]
        
        self.CUISINE_PLUS_PERPIGNAN_CONTACT_NAMES = [
            # Pas de conversions contact pour Cuisine Plus Perpignan
        ]
        
        self.CUISINE_PLUS_PERPIGNAN_DIRECTIONS_NAMES = [
            "itin√©raires"
        ]
        
        self.FLAMME_CREATION_CONTACT_NAMES = [
            "appels",
            "clicks to call"
        ]
        
        self.FLAMME_CREATION_DIRECTIONS_NAMES = [
            "itin√©raires",
            "local actions - directions"
        ]
        
        self.FL_CHAMPAGNE_CONTACT_NAMES = [
            "appels"
        ]
        
        self.FL_CHAMPAGNE_DIRECTIONS_NAMES = [
            "itin√©raires"
        ]
        
        self.SAINT_PRIEST_GIVORS_CONTACT_NAMES = [
            "appel givors",
            "appel st priest",
            "appels",
            "clicks to call",
            "cta"
        ]
        
        self.SAINT_PRIEST_GIVORS_DIRECTIONS_NAMES = [
            "itin√©raire saint priest",
            "itin√©raire givors",
            "local actions - directions"
        ]
        
        self.FL_ANTIBES_CONTACT_NAMES = [
            "appels",
            "clicks to call",
            "cta"
        ]
        
        self.FL_ANTIBES_DIRECTIONS_NAMES = [
            "itin√©raires",
            "local actions - directions"
        ]
        
    
    def get_all_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, int, List[Dict]]:
        """
        R√©cup√®re TOUTES les conversions et les s√©pare en Contact et Itin√©raires
        
        Args:
            customer_id: ID du client Google Ads
            start_date: Date de d√©but (YYYY-MM-DD)
            end_date: Date de fin (YYYY-MM-DD)
            
        Returns:
            Tuple (contact_total, directions_total, all_conversions)
        """
        contact_total = 0
        directions_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üîç Recherche de TOUTES les conversions pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            # ‚úÖ CORRECTION: response contient directement les GoogleAdsRow
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                # Si conversions a une valeur, l'utiliser
                # Sinon, utiliser all_conversions MAIS seulement si la diff√©rence n'est pas trop importante
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    # Utiliser all_conversions seulement si conversions est 0
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # Debug logging pour comprendre les valeurs
                logging.info(f"üîç Conversion: {row.segments.conversion_action_name}")
                logging.info(f"   - metrics.conversions: {row.metrics.conversions}")
                logging.info(f"   - metrics.all_conversions: {row.metrics.all_conversions}")
                logging.info(f"   - Valeur utilis√©e: {conversions_value}")
                
                # Logging sp√©cial pour les conversions Contact
                if any(target_name in conversion_name for target_name in self.TARGET_CONTACT_NAMES):
                    logging.info(f"üìû CONVERSION CONTACT D√âTECT√âE: {row.segments.conversion_action_name}")
                    logging.info(f"   - conversions: {row.metrics.conversions}")
                    logging.info(f"   - all_conversions: {row.metrics.all_conversions}")
                    logging.info(f"   - Valeur finale: {conversions_value}")
                
                # V√©rifier si c'est A.G. Cryolipolyse (customer_id: 9321943301)
                is_cryolipolyse = customer_id == "9321943301"
                # V√©rifier si c'est Addario (customer_id: 1513412386)
                is_addario = customer_id == "1513412386"
                # V√©rifier si c'est Crozatier Dijon (customer_id: 3259500758)
                is_crozatier = customer_id == "3259500758"
                # V√©rifier si c'est Denteva (customer_id: 1810240249)
                is_denteva = customer_id == "1810240249"
                # V√©rifier si c'est EvoPro (customer_id: 5461114350)
                is_evopro = customer_id == "5461114350"
                # V√©rifier si c'est France Literie Aix (customer_id: 5104651305)
                is_france_literie_aix = customer_id == "5104651305"
                # V√©rifier si c'est France Literie Annemasse (customer_id: 2744128994)
                is_france_literie_annemasse = customer_id == "2744128994"
                # V√©rifier si c'est FL Antibes Vallauris (customer_id: 2485486745)
                is_fl_antibes = customer_id == "2485486745"
                
                # Classifier par section bas√©e sur le nom
                if is_cryolipolyse:
                    is_contact = any(target_name in conversion_name for target_name in self.CRYOLIPOLYSE_CONTACT_NAMES)
                    is_directions = any(target_name in conversion_name for target_name in self.TARGET_DIRECTIONS_NAMES)
                    if is_contact:
                        logging.info(f"üßä CONVERSION CRYOLIPOLYSE CONTACT: {row.segments.conversion_action_name} = {conversions_value}")
                elif is_addario:
                    is_contact = any(target_name in conversion_name for target_name in self.TARGET_CONTACT_NAMES)
                    is_directions = any(target_name in conversion_name for target_name in self.ADDARIO_DIRECTIONS_NAMES)
                    if is_directions:
                        logging.info(f"üéØ CONVERSION ADDARIO ITIN√âRAIRES: {row.segments.conversion_action_name} = {conversions_value}")
                elif is_crozatier:
                    is_contact = any(target_name in conversion_name for target_name in self.CROZATIER_CONTACT_NAMES)
                    is_directions = any(target_name in conversion_name for target_name in self.TARGET_DIRECTIONS_NAMES)
                    if is_contact:
                        logging.info(f"üè™ CONVERSION CROZATIER CONTACT: {row.segments.conversion_action_name} = {conversions_value}")
                elif is_denteva:
                    is_contact = any(target_name in conversion_name for target_name in self.DENTEVA_CONTACT_NAMES)
                    is_directions = any(target_name in conversion_name for target_name in self.DENTEVA_DIRECTIONS_NAMES)
                    if is_contact:
                        logging.info(f"ü¶∑ CONVERSION DENTEVA CONTACT: {row.segments.conversion_action_name} = {conversions_value}")
                    if is_directions:
                        logging.info(f"ü¶∑ CONVERSION DENTEVA ITIN√âRAIRES: {row.segments.conversion_action_name} = {conversions_value}")
                elif is_evopro:
                    is_contact = any(target_name in conversion_name for target_name in self.EVOPRO_CONTACT_NAMES)
                    is_directions = any(target_name in conversion_name for target_name in self.EVOPRO_DIRECTIONS_NAMES)
                    if is_contact:
                        logging.info(f"üíª CONVERSION EVOPRO CONTACT: {row.segments.conversion_action_name} = {conversions_value}")
                    if is_directions:
                        logging.info(f"üíª CONVERSION EVOPRO ITIN√âRAIRES: {row.segments.conversion_action_name} = {conversions_value}")
                elif is_france_literie_aix:
                    is_contact = any(target_name in conversion_name for target_name in self.FRANCE_LITERIE_AIX_CONTACT_NAMES)
                    is_directions = any(target_name in conversion_name for target_name in self.FRANCE_LITERIE_AIX_DIRECTIONS_NAMES)
                    if is_contact:
                        logging.info(f"üõèÔ∏è CONVERSION FRANCE LITERIE AIX CONTACT: {row.segments.conversion_action_name} = {conversions_value}")
                    if is_directions:
                        logging.info(f"üõèÔ∏è CONVERSION FRANCE LITERIE AIX ITIN√âRAIRES: {row.segments.conversion_action_name} = {conversions_value}")
                elif is_france_literie_annemasse:
                    is_contact = any(target_name in conversion_name for target_name in self.FRANCE_LITERIE_ANNEMASSE_CONTACT_NAMES)
                    is_directions = any(target_name in conversion_name for target_name in self.FRANCE_LITERIE_ANNEMASSE_DIRECTIONS_NAMES)
                    if is_contact:
                        logging.info(f"üèîÔ∏è CONVERSION FRANCE LITERIE ANNEMASSE CONTACT: {row.segments.conversion_action_name} = {conversions_value}")
                    if is_directions:
                        logging.info(f"üèîÔ∏è CONVERSION FRANCE LITERIE ANNEMASSE ITIN√âRAIRES: {row.segments.conversion_action_name} = {conversions_value}")
                elif is_fl_antibes:
                    is_contact = any(target_name in conversion_name for target_name in self.FL_ANTIBES_CONTACT_NAMES)
                    is_directions = any(target_name in conversion_name for target_name in self.FL_ANTIBES_DIRECTIONS_NAMES)
                    if is_contact:
                        logging.info(f"üèñÔ∏è CONVERSION FL ANTIBES CONTACT: {row.segments.conversion_action_name} = {conversions_value}")
                    if is_directions:
                        logging.info(f"üèñÔ∏è CONVERSION FL ANTIBES ITIN√âRAIRES: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    # Logique standard pour tous les autres clients
                    is_contact = any(target_name in conversion_name for target_name in self.TARGET_CONTACT_NAMES)
                    is_directions = any(target_name in conversion_name for target_name in self.TARGET_DIRECTIONS_NAMES)
                
                if is_contact:
                    contact_total += conversions_value
                    logging.info(f"‚úÖ Conversion Contact: {row.segments.conversion_action_name} = {conversions_value}")
                elif is_directions:
                    directions_total += conversions_value
                    logging.info(f"‚úÖ Conversion Itin√©raires: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    # Si aucune section n'est identifi√©e, essayer de deviner bas√© sur le contexte
                    logging.info(f"‚ö†Ô∏è Conversion non classifi√©e: {row.segments.conversion_action_name} = {conversions_value}")
                    # Pour l'instant, on ignore les conversions non classifi√©es
                    pass
            
            logging.info(f"üìä Total Contact: {contact_total}, Total Itin√©raires: {directions_total}")
            return contact_total, directions_total, all_conversions
            
        except GoogleAdsException as ex:
            logging.error(f"‚ùå GoogleAds API error pour {customer_id}: {ex.error.code().name}")
            for error in ex.failure.errors:
                logging.error(f"   - {error.message}")
            return contact_total, directions_total, all_conversions
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions pour {customer_id}: {e}")
            return contact_total, directions_total, all_conversions
    
    def get_contact_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Contact (utilise la nouvelle m√©thode)
        """
        contact_total, directions_total, all_conversions = self.get_all_conversions_data(
            customer_id, start_date, end_date
        )
        
        # Filtrer seulement les conversions Contact
        contact_conversions = [conv for conv in all_conversions 
                              if any(target_name in conv['name'].lower() for target_name in self.TARGET_CONTACT_NAMES)]
        
        return contact_total, contact_conversions
    
    def get_cryolipolyse_contact_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Contact sp√©cifiquement pour A.G. Cryolipolyse
        Uniquement les conversions contenant "Appels" et "CTA"
        """
        contact_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üßä Recherche des conversions CRYOLIPOLYSE pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Contact pour Cryolipolyse (uniquement "Appels" et "CTA")
                is_cryolipolyse_contact = any(target_name in conversion_name for target_name in self.CRYOLIPOLYSE_CONTACT_NAMES)
                
                if is_cryolipolyse_contact:
                    contact_total += conversions_value
                    logging.info(f"üßä CONVERSION CRYOLIPOLYSE CONTACT: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion Cryolipolyse ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Contact Cryolipolyse
            contact_conversions = [conv for conv in all_conversions 
                                  if any(target_name in conv['name'].lower() for target_name in self.CRYOLIPOLYSE_CONTACT_NAMES)]
            
            logging.info(f"üßä Total Contact Cryolipolyse: {contact_total}")
            return contact_total, contact_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions Cryolipolyse pour {customer_id}: {e}")
            return contact_total, all_conversions
    
    def get_crozatier_contact_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Contact sp√©cifiquement pour Crozatier Dijon
        Uniquement les conversions contenant "Appels" et "Clicks to call"
        """
        contact_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üè™ Recherche des conversions CROZATIER CONTACT pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Contact pour Crozatier (uniquement "Appels" et "Clicks to call")
                is_crozatier_contact = any(target_name in conversion_name for target_name in self.CROZATIER_CONTACT_NAMES)
                
                if is_crozatier_contact:
                    contact_total += conversions_value
                    logging.info(f"üè™ CONVERSION CROZATIER CONTACT: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion Crozatier ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Contact Crozatier
            contact_conversions = [conv for conv in all_conversions 
                                  if any(target_name in conv['name'].lower() for target_name in self.CROZATIER_CONTACT_NAMES)]
            
            logging.info(f"üè™ Total Contact Crozatier: {contact_total}")
            return contact_total, contact_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions Crozatier pour {customer_id}: {e}")
            return contact_total, all_conversions
    
    def get_denteva_contact_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Contact sp√©cifiquement pour Denteva
        Uniquement les conversions contenant "Action de conversion" et "Appels"
        """
        contact_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"ü¶∑ Recherche des conversions DENTEVA CONTACT pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Contact pour Denteva (uniquement "Action de conversion" et "Appels")
                is_denteva_contact = any(target_name in conversion_name for target_name in self.DENTEVA_CONTACT_NAMES)
                
                if is_denteva_contact:
                    contact_total += conversions_value
                    logging.info(f"ü¶∑ CONVERSION DENTEVA CONTACT: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion Denteva Contact ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Contact Denteva
            contact_conversions = [conv for conv in all_conversions 
                                  if any(target_name in conv['name'].lower() for target_name in self.DENTEVA_CONTACT_NAMES)]
            
            logging.info(f"ü¶∑ Total Contact Denteva: {contact_total}")
            return contact_total, contact_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions Denteva Contact pour {customer_id}: {e}")
            return contact_total, all_conversions
    
    def get_denteva_directions_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Itin√©raires sp√©cifiquement pour Denteva
        Uniquement les conversions contenant "Itin√©raires", "Click Map" et "Local actions - Directions"
        """
        directions_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"ü¶∑ Recherche des conversions DENTEVA ITIN√âRAIRES pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Itin√©raires pour Denteva (uniquement "Itin√©raires", "Click Map" et "Local actions - Directions")
                is_denteva_directions = any(target_name in conversion_name for target_name in self.DENTEVA_DIRECTIONS_NAMES)
                
                if is_denteva_directions:
                    directions_total += conversions_value
                    logging.info(f"ü¶∑ CONVERSION DENTEVA ITIN√âRAIRES: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion Denteva Itin√©raires ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Itin√©raires Denteva
            directions_conversions = [conv for conv in all_conversions 
                                     if any(target_name in conv['name'].lower() for target_name in self.DENTEVA_DIRECTIONS_NAMES)]
            
            logging.info(f"ü¶∑ Total Itin√©raires Denteva: {directions_total}")
            return directions_total, directions_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions Denteva Itin√©raires pour {customer_id}: {e}")
            return directions_total, all_conversions
    
    def get_evopro_contact_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Contact sp√©cifiquement pour EvoPro
        Toutes les conversions Contact : "Action de conversion", "Appel (CTA)", "CTA", "Clicks to call", "Appels", "Appel (footer)"
        """
        contact_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üíª Recherche des conversions EVOPRO CONTACT pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Contact pour EvoPro (toutes les conversions Contact)
                is_evopro_contact = any(target_name in conversion_name for target_name in self.EVOPRO_CONTACT_NAMES)
                
                if is_evopro_contact:
                    contact_total += conversions_value
                    logging.info(f"üíª CONVERSION EVOPRO CONTACT: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion EvoPro Contact ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Contact EvoPro
            contact_conversions = [conv for conv in all_conversions 
                                  if any(target_name in conv['name'].lower() for target_name in self.EVOPRO_CONTACT_NAMES)]
            
            logging.info(f"üíª Total Contact EvoPro: {contact_total}")
            return contact_total, contact_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions EvoPro Contact pour {customer_id}: {e}")
            return contact_total, all_conversions
    
    def get_evopro_directions_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Itin√©raires sp√©cifiquement pour EvoPro
        Uniquement les conversions contenant "Itin√©raires" et "Local actions - Directions"
        """
        directions_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üíª Recherche des conversions EVOPRO ITIN√âRAIRES pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Itin√©raires pour EvoPro (uniquement "Itin√©raires" et "Local actions - Directions")
                is_evopro_directions = any(target_name in conversion_name for target_name in self.EVOPRO_DIRECTIONS_NAMES)
                
                if is_evopro_directions:
                    directions_total += conversions_value
                    logging.info(f"üíª CONVERSION EVOPRO ITIN√âRAIRES: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion EvoPro Itin√©raires ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Itin√©raires EvoPro
            directions_conversions = [conv for conv in all_conversions 
                                     if any(target_name in conv['name'].lower() for target_name in self.EVOPRO_DIRECTIONS_NAMES)]
            
            logging.info(f"üíª Total Itin√©raires EvoPro: {directions_total}")
            return directions_total, directions_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions EvoPro Itin√©raires pour {customer_id}: {e}")
            return directions_total, all_conversions
    
    def get_france_literie_aix_contact_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Contact sp√©cifiquement pour France Literie Aix
        Uniquement les conversions contenant "Appels" et "CTA" (m√™me logique que Cryolipolyse)
        """
        contact_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üõèÔ∏è Recherche des conversions FRANCE LITERIE AIX CONTACT pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Contact pour France Literie Aix (uniquement "Appels" et "CTA")
                is_france_literie_aix_contact = any(target_name in conversion_name for target_name in self.FRANCE_LITERIE_AIX_CONTACT_NAMES)
                
                if is_france_literie_aix_contact:
                    contact_total += conversions_value
                    logging.info(f"üõèÔ∏è CONVERSION FRANCE LITERIE AIX CONTACT: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion France Literie Aix Contact ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Contact France Literie Aix
            contact_conversions = [conv for conv in all_conversions 
                                  if any(target_name in conv['name'].lower() for target_name in self.FRANCE_LITERIE_AIX_CONTACT_NAMES)]
            
            logging.info(f"üõèÔ∏è Total Contact France Literie Aix: {contact_total}")
            return contact_total, contact_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions France Literie Aix Contact pour {customer_id}: {e}")
            return contact_total, all_conversions
    
    def get_france_literie_aix_directions_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Itin√©raires sp√©cifiquement pour France Literie Aix
        Uniquement les conversions contenant "Itin√©raires" et "Local actions - Directions"
        """
        directions_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üõèÔ∏è Recherche des conversions FRANCE LITERIE AIX ITIN√âRAIRES pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Itin√©raires pour France Literie Aix (uniquement "Itin√©raires" et "Local actions - Directions")
                is_france_literie_aix_directions = any(target_name in conversion_name for target_name in self.FRANCE_LITERIE_AIX_DIRECTIONS_NAMES)
                
                if is_france_literie_aix_directions:
                    directions_total += conversions_value
                    logging.info(f"üõèÔ∏è CONVERSION FRANCE LITERIE AIX ITIN√âRAIRES: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion France Literie Aix Itin√©raires ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Itin√©raires France Literie Aix
            directions_conversions = [conv for conv in all_conversions 
                                   if any(target_name in conv['name'].lower() for target_name in self.FRANCE_LITERIE_AIX_DIRECTIONS_NAMES)]
            
            logging.info(f"üõèÔ∏è Total Itin√©raires France Literie Aix: {directions_total}")
            return directions_total, directions_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions France Literie Aix Itin√©raires pour {customer_id}: {e}")
            return directions_total, all_conversions
    
    def get_france_literie_dijon_contact_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Contact sp√©cifiquement pour France Literie Dijon
        Uniquement les conversions contenant "Appels" et "CTA"
        """
        contact_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üè∞ Recherche des conversions FRANCE LITERIE DIJON CONTACT pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Contact pour France Literie Dijon (uniquement "Appels" et "CTA")
                is_france_literie_dijon_contact = any(target_name in conversion_name for target_name in self.FRANCE_LITERIE_DIJON_CONTACT_NAMES)
                
                if is_france_literie_dijon_contact:
                    contact_total += conversions_value
                    logging.info(f"üè∞ CONVERSION FRANCE LITERIE DIJON CONTACT: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion France Literie Dijon Contact ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Contact France Literie Dijon
            contact_conversions = [conv for conv in all_conversions 
                                  if any(target_name in conv['name'].lower() for target_name in self.FRANCE_LITERIE_DIJON_CONTACT_NAMES)]
            
            logging.info(f"üè∞ Total Contact France Literie Dijon: {contact_total}")
            return contact_total, contact_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions France Literie Dijon Contact pour {customer_id}: {e}")
            return contact_total, all_conversions
    
    def get_france_literie_dijon_directions_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Itin√©raires sp√©cifiquement pour France Literie Dijon
        Uniquement les conversions contenant "Itin√©raires" et "Magasin"
        """
        directions_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üè∞ Recherche des conversions FRANCE LITERIE DIJON ITIN√âRAIRES pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Itin√©raires pour France Literie Dijon (uniquement "Itin√©raires" et "Magasin")
                is_france_literie_dijon_directions = any(target_name in conversion_name for target_name in self.FRANCE_LITERIE_DIJON_DIRECTIONS_NAMES)
                
                if is_france_literie_dijon_directions:
                    directions_total += conversions_value
                    logging.info(f"üè∞ CONVERSION FRANCE LITERIE DIJON ITIN√âRAIRES: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion France Literie Dijon Itin√©raires ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Itin√©raires France Literie Dijon
            directions_conversions = [conv for conv in all_conversions 
                                   if any(target_name in conv['name'].lower() for target_name in self.FRANCE_LITERIE_DIJON_DIRECTIONS_NAMES)]
            
            logging.info(f"üè∞ Total Itin√©raires France Literie Dijon: {directions_total}")
            return directions_total, directions_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions France Literie Dijon Itin√©raires pour {customer_id}: {e}")
            return directions_total, all_conversions
    
    def get_france_literie_narbonne_contact_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Contact sp√©cifiquement pour France Literie Narbonne
        Uniquement les conversions contenant "Appels" et "CTA"
        """
        contact_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üèõÔ∏è Recherche des conversions FRANCE LITERIE NARBONNE CONTACT pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # üèõÔ∏è LOGS D√âTAILL√âS FRANCE LITERIE NARBONNE - Debug complet (client qui fonctionne)
                logging.info(f"üèõÔ∏è FL NARBONNE DEBUG - Conversion trouv√©e: '{row.segments.conversion_action_name}'")
                logging.info(f"üèõÔ∏è FL NARBONNE DEBUG - metrics.conversions: {row.metrics.conversions}")
                logging.info(f"üèõÔ∏è FL NARBONNE DEBUG - metrics.all_conversions: {row.metrics.all_conversions}")
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                    logging.info(f"üèõÔ∏è FL NARBONNE DEBUG - Utilisation de metrics.conversions: {conversions_value}")
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                    logging.info(f"üèõÔ∏è FL NARBONNE DEBUG - Utilisation de metrics.all_conversions: {conversions_value}")
                else:
                    conversions_value = 0
                    logging.info(f"üèõÔ∏è FL NARBONNE DEBUG - Aucune conversion, valeur = 0")
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Contact pour France Literie Narbonne (uniquement "Appels" et "CTA")
                is_france_literie_narbonne_contact = any(target_name in conversion_name for target_name in self.FRANCE_LITERIE_NARBONNE_CONTACT_NAMES)
                
                # üèõÔ∏è LOGS D√âTAILL√âS FRANCE LITERIE NARBONNE - V√©rification des noms de conversions
                logging.info(f"üèõÔ∏è FL NARBONNE DEBUG - Noms recherch√©s: {self.FRANCE_LITERIE_NARBONNE_CONTACT_NAMES}")
                logging.info(f"üèõÔ∏è FL NARBONNE DEBUG - Nom de conversion: '{conversion_name}'")
                logging.info(f"üèõÔ∏è FL NARBONNE DEBUG - Match trouv√©: {is_france_literie_narbonne_contact}")
                
                if is_france_literie_narbonne_contact:
                    contact_total += conversions_value
                    logging.info(f"üèõÔ∏è CONVERSION FRANCE LITERIE NARBONNE CONTACT: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion France Literie Narbonne Contact ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Contact France Literie Narbonne
            contact_conversions = [conv for conv in all_conversions 
                                  if any(target_name in conv['name'].lower() for target_name in self.FRANCE_LITERIE_NARBONNE_CONTACT_NAMES)]
            
            logging.info(f"üèõÔ∏è Total Contact France Literie Narbonne: {contact_total}")
            logging.info(f"üèõÔ∏è FL NARBONNE R√âSUM√â - Total final: {contact_total}")
            logging.info(f"üèõÔ∏è FL NARBONNE R√âSUM√â - Conversions trouv√©es: {len(contact_conversions)}")
            for conv in contact_conversions:
                logging.info(f"üèõÔ∏è FL NARBONNE R√âSUM√â - {conv['name']}: {conv['conversions']}")
            return contact_total, contact_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions France Literie Narbonne Contact pour {customer_id}: {e}")
            return contact_total, all_conversions
    
    def get_france_literie_narbonne_directions_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Itin√©raires sp√©cifiquement pour France Literie Narbonne
        Uniquement les conversions contenant "Itin√©raires" et "Local actions - Directions"
        """
        directions_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üèõÔ∏è Recherche des conversions FRANCE LITERIE NARBONNE ITIN√âRAIRES pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Itin√©raires pour France Literie Narbonne (uniquement "Itin√©raires" et "Local actions - Directions")
                is_france_literie_narbonne_directions = any(target_name in conversion_name for target_name in self.FRANCE_LITERIE_NARBONNE_DIRECTIONS_NAMES)
                
                if is_france_literie_narbonne_directions:
                    directions_total += conversions_value
                    logging.info(f"üèõÔ∏è CONVERSION FRANCE LITERIE NARBONNE ITIN√âRAIRES: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion France Literie Narbonne Itin√©raires ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Itin√©raires France Literie Narbonne
            directions_conversions = [conv for conv in all_conversions 
                                   if any(target_name in conv['name'].lower() for target_name in self.FRANCE_LITERIE_NARBONNE_DIRECTIONS_NAMES)]
            
            logging.info(f"üèõÔ∏è Total Itin√©raires France Literie Narbonne: {directions_total}")
            return directions_total, directions_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions France Literie Narbonne Itin√©raires pour {customer_id}: {e}")
            return directions_total, all_conversions
    
    def get_france_literie_perpignan_contact_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Contact sp√©cifiquement pour France Literie Perpignan
        Uniquement les conversions contenant "Appels" et "Clicks to call"
        """
        contact_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üè∞ Recherche des conversions FRANCE LITERIE PERPIGNAN CONTACT pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Contact pour France Literie Perpignan (uniquement "Appels" et "Clicks to call")
                is_france_literie_perpignan_contact = any(target_name in conversion_name for target_name in self.FRANCE_LITERIE_PERPIGNAN_CONTACT_NAMES)
                
                if is_france_literie_perpignan_contact:
                    contact_total += conversions_value
                    logging.info(f"üè∞ CONVERSION FRANCE LITERIE PERPIGNAN CONTACT: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion France Literie Perpignan Contact ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Contact France Literie Perpignan
            contact_conversions = [conv for conv in all_conversions 
                                  if any(target_name in conv['name'].lower() for target_name in self.FRANCE_LITERIE_PERPIGNAN_CONTACT_NAMES)]
            
            logging.info(f"üè∞ Total Contact France Literie Perpignan: {contact_total}")
            return contact_total, contact_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions France Literie Perpignan Contact pour {customer_id}: {e}")
            return contact_total, all_conversions
    
    def get_france_literie_perpignan_directions_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Itin√©raires sp√©cifiquement pour France Literie Perpignan
        Uniquement les conversions contenant "Itin√©raires" et "Local actions - Directions"
        """
        directions_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üè∞ Recherche des conversions FRANCE LITERIE PERPIGNAN ITIN√âRAIRES pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Itin√©raires pour France Literie Perpignan (uniquement "Itin√©raires" et "Local actions - Directions")
                is_france_literie_perpignan_directions = any(target_name in conversion_name for target_name in self.FRANCE_LITERIE_PERPIGNAN_DIRECTIONS_NAMES)
                
                if is_france_literie_perpignan_directions:
                    directions_total += conversions_value
                    logging.info(f"üè∞ CONVERSION FRANCE LITERIE PERPIGNAN ITIN√âRAIRES: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion France Literie Perpignan Itin√©raires ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Itin√©raires France Literie Perpignan
            directions_conversions = [conv for conv in all_conversions 
                                   if any(target_name in conv['name'].lower() for target_name in self.FRANCE_LITERIE_PERPIGNAN_DIRECTIONS_NAMES)]
            
            logging.info(f"üè∞ Total Itin√©raires France Literie Perpignan: {directions_total}")
            return directions_total, directions_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions France Literie Perpignan Itin√©raires pour {customer_id}: {e}")
            return directions_total, all_conversions
    
    def get_kaltea_aubagne_contact_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Contact sp√©cifiquement pour Kaltea Aubagne
        Uniquement les conversions contenant les diff√©rents types d'appels
        """
        contact_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üå°Ô∏è Recherche des conversions KALTEA AUBAGNE CONTACT pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Contact pour Kaltea Aubagne
                is_kaltea_aubagne_contact = any(target_name in conversion_name for target_name in self.KALTEA_AUBAGNE_CONTACT_NAMES)
                
                if is_kaltea_aubagne_contact:
                    contact_total += conversions_value
                    logging.info(f"üå°Ô∏è CONVERSION KALTEA AUBAGNE CONTACT: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion Kaltea Aubagne Contact ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Contact Kaltea Aubagne
            contact_conversions = [conv for conv in all_conversions 
                                  if any(target_name in conv['name'].lower() for target_name in self.KALTEA_AUBAGNE_CONTACT_NAMES)]
            
            logging.info(f"üå°Ô∏è Total Contact Kaltea Aubagne: {contact_total}")
            return contact_total, contact_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions Kaltea Aubagne Contact pour {customer_id}: {e}")
            return contact_total, all_conversions
    
    def get_kaltea_aubagne_directions_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Itin√©raires sp√©cifiquement pour Kaltea Aubagne
        Uniquement les conversions contenant les diff√©rents types d'itin√©raires
        """
        directions_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üå°Ô∏è Recherche des conversions KALTEA AUBAGNE ITIN√âRAIRES pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Itin√©raires pour Kaltea Aubagne
                is_kaltea_aubagne_directions = any(target_name in conversion_name for target_name in self.KALTEA_AUBAGNE_DIRECTIONS_NAMES)
                
                if is_kaltea_aubagne_directions:
                    directions_total += conversions_value
                    logging.info(f"üå°Ô∏è CONVERSION KALTEA AUBAGNE ITIN√âRAIRES: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion Kaltea Aubagne Itin√©raires ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Itin√©raires Kaltea Aubagne
            directions_conversions = [conv for conv in all_conversions 
                                   if any(target_name in conv['name'].lower() for target_name in self.KALTEA_AUBAGNE_DIRECTIONS_NAMES)]
            
            logging.info(f"üå°Ô∏è Total Itin√©raires Kaltea Aubagne: {directions_total}")
            return directions_total, directions_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions Kaltea Aubagne Itin√©raires pour {customer_id}: {e}")
            return directions_total, all_conversions
    
    def get_kaltea_chalon_contact_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Contact sp√©cifiquement pour Kaltea Chalon
        Uniquement les conversions contenant "Clicks to call" et "Appels"
        """
        contact_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üå°Ô∏è Recherche des conversions KALTEA CHALON CONTACT pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Contact pour Kaltea Chalon
                is_kaltea_chalon_contact = any(target_name in conversion_name for target_name in self.KALTEA_CHALON_CONTACT_NAMES)
                
                if is_kaltea_chalon_contact:
                    contact_total += conversions_value
                    logging.info(f"üå°Ô∏è CONVERSION KALTEA CHALON CONTACT: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion Kaltea Chalon Contact ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Contact Kaltea Chalon
            contact_conversions = [conv for conv in all_conversions 
                                  if any(target_name in conv['name'].lower() for target_name in self.KALTEA_CHALON_CONTACT_NAMES)]
            
            logging.info(f"üå°Ô∏è Total Contact Kaltea Chalon: {contact_total}")
            return contact_total, contact_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions Kaltea Chalon Contact pour {customer_id}: {e}")
            return contact_total, all_conversions
    
    def get_kaltea_chalon_directions_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Itin√©raires sp√©cifiquement pour Kaltea Chalon
        Uniquement les conversions contenant "Local actions - Directions" et "Itin√©raires Magasin"
        """
        directions_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üå°Ô∏è Recherche des conversions KALTEA CHALON ITIN√âRAIRES pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Itin√©raires pour Kaltea Chalon
                is_kaltea_chalon_directions = any(target_name in conversion_name for target_name in self.KALTEA_CHALON_DIRECTIONS_NAMES)
                
                if is_kaltea_chalon_directions:
                    directions_total += conversions_value
                    logging.info(f"üå°Ô∏è CONVERSION KALTEA CHALON ITIN√âRAIRES: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion Kaltea Chalon Itin√©raires ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Itin√©raires Kaltea Chalon
            directions_conversions = [conv for conv in all_conversions 
                                   if any(target_name in conv['name'].lower() for target_name in self.KALTEA_CHALON_DIRECTIONS_NAMES)]
            
            logging.info(f"üå°Ô∏è Total Itin√©raires Kaltea Chalon: {directions_total}")
            return directions_total, directions_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions Kaltea Chalon Itin√©raires pour {customer_id}: {e}")
            return directions_total, all_conversions
    
    def get_kaltea_lyon_contact_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Contact sp√©cifiquement pour Kaltea Lyon
        Uniquement les conversions contenant "Clicks to call" et "Appels"
        """
        contact_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üå°Ô∏è Recherche des conversions KALTEA LYON CONTACT pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Contact pour Kaltea Lyon
                is_kaltea_lyon_contact = any(target_name in conversion_name for target_name in self.KALTEA_LYON_CONTACT_NAMES)
                
                if is_kaltea_lyon_contact:
                    contact_total += conversions_value
                    logging.info(f"üå°Ô∏è CONVERSION KALTEA LYON CONTACT: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion Kaltea Lyon Contact ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Contact Kaltea Lyon
            contact_conversions = [conv for conv in all_conversions 
                                  if any(target_name in conv['name'].lower() for target_name in self.KALTEA_LYON_CONTACT_NAMES)]
            
            logging.info(f"üå°Ô∏è Total Contact Kaltea Lyon: {contact_total}")
            return contact_total, contact_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions Kaltea Lyon Contact pour {customer_id}: {e}")
            return contact_total, all_conversions
    
    def get_kaltea_lyon_directions_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Itin√©raires sp√©cifiquement pour Kaltea Lyon
        Uniquement les conversions contenant "Local actions - Directions" et "Itin√©raire"
        """
        directions_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üå°Ô∏è Recherche des conversions KALTEA LYON ITIN√âRAIRES pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Itin√©raires pour Kaltea Lyon
                is_kaltea_lyon_directions = any(target_name in conversion_name for target_name in self.KALTEA_LYON_DIRECTIONS_NAMES)
                
                if is_kaltea_lyon_directions:
                    directions_total += conversions_value
                    logging.info(f"üå°Ô∏è CONVERSION KALTEA LYON ITIN√âRAIRES: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion Kaltea Lyon Itin√©raires ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Itin√©raires Kaltea Lyon
            directions_conversions = [conv for conv in all_conversions 
                                   if any(target_name in conv['name'].lower() for target_name in self.KALTEA_LYON_DIRECTIONS_NAMES)]
            
            logging.info(f"üå°Ô∏è Total Itin√©raires Kaltea Lyon: {directions_total}")
            return directions_total, directions_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions Kaltea Lyon Itin√©raires pour {customer_id}: {e}")
            return directions_total, all_conversions
    
    def get_laserel_contact_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Contact sp√©cifiquement pour Laserel
        Retourne "Faire √† la main" au lieu de scraper les donn√©es
        """
        logging.info(f"üî¨ LASEREL CONTACT - Mode manuel activ√© : 'Faire √† la main'")
        
        # Retourner "Faire √† la main" au lieu de scraper
        return "Faire √† la main", []
    
    def get_laserel_directions_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Itin√©raires sp√©cifiquement pour Laserel
        Uniquement les conversions contenant "Actions locales ‚Äì Itin√©raire"
        """
        directions_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üî¨ Recherche des conversions LASEREL ITIN√âRAIRES pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Itin√©raires pour Laserel
                is_laserel_directions = any(target_name in conversion_name for target_name in self.LASEREL_DIRECTIONS_NAMES)
                
                if is_laserel_directions:
                    directions_total += conversions_value
                    logging.info(f"üî¨ CONVERSION LASEREL ITIN√âRAIRES: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion Laserel Itin√©raires ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Itin√©raires Laserel
            directions_conversions = [conv for conv in all_conversions 
                                   if any(target_name in conv['name'].lower() for target_name in self.LASEREL_DIRECTIONS_NAMES)]
            
            logging.info(f"üî¨ Total Itin√©raires Laserel: {directions_total}")
            return directions_total, directions_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions Laserel Itin√©raires pour {customer_id}: {e}")
            return directions_total, all_conversions
    
    def get_star_literie_contact_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Contact sp√©cifiquement pour Star Literie
        Uniquement les conversions contenant "Appels" et "Clicks to call"
        """
        contact_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"‚≠ê Recherche des conversions STAR LITERIE CONTACT pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Contact pour Star Literie
                is_star_literie_contact = any(target_name in conversion_name for target_name in self.STAR_LITERIE_CONTACT_NAMES)
                
                if is_star_literie_contact:
                    contact_total += conversions_value
                    logging.info(f"‚≠ê CONVERSION STAR LITERIE CONTACT: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion Star Literie Contact ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Contact Star Literie
            contact_conversions = [conv for conv in all_conversions 
                                  if any(target_name in conv['name'].lower() for target_name in self.STAR_LITERIE_CONTACT_NAMES)]
            
            logging.info(f"‚≠ê Total Contact Star Literie: {contact_total}")
            return contact_total, contact_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions Star Literie Contact pour {customer_id}: {e}")
            return contact_total, all_conversions
    
    def get_star_literie_directions_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Itin√©raires sp√©cifiquement pour Star Literie
        Uniquement les conversions contenant "Itin√©raires", "Local actions - Directions" et "Itin√©raires Magasin"
        """
        directions_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"‚≠ê Recherche des conversions STAR LITERIE ITIN√âRAIRES pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Itin√©raires pour Star Literie
                is_star_literie_directions = any(target_name in conversion_name for target_name in self.STAR_LITERIE_DIRECTIONS_NAMES)
                
                if is_star_literie_directions:
                    directions_total += conversions_value
                    logging.info(f"‚≠ê CONVERSION STAR LITERIE ITIN√âRAIRES: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion Star Literie Itin√©raires ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Itin√©raires Star Literie
            directions_conversions = [conv for conv in all_conversions 
                                   if any(target_name in conv['name'].lower() for target_name in self.STAR_LITERIE_DIRECTIONS_NAMES)]
            
            logging.info(f"‚≠ê Total Itin√©raires Star Literie: {directions_total}")
            return directions_total, directions_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions Star Literie Itin√©raires pour {customer_id}: {e}")
            return directions_total, all_conversions
    
    def get_tousalon_perpignan_contact_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Contact sp√©cifiquement pour Tousalon Perpignan
        Uniquement les conversions contenant "Appels"
        """
        contact_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üíá Recherche des conversions TOUSALON PERPIGNAN CONTACT pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Contact pour Tousalon Perpignan
                is_tousalon_perpignan_contact = any(target_name in conversion_name for target_name in self.TOUSALON_PERPIGNAN_CONTACT_NAMES)
                
                if is_tousalon_perpignan_contact:
                    contact_total += conversions_value
                    logging.info(f"üíá CONVERSION TOUSALON PERPIGNAN CONTACT: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion Tousalon Perpignan Contact ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Contact Tousalon Perpignan
            contact_conversions = [conv for conv in all_conversions 
                                  if any(target_name in conv['name'].lower() for target_name in self.TOUSALON_PERPIGNAN_CONTACT_NAMES)]
            
            logging.info(f"üíá Total Contact Tousalon Perpignan: {contact_total}")
            return contact_total, contact_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions Tousalon Perpignan Contact pour {customer_id}: {e}")
            return contact_total, all_conversions
    
    def get_tousalon_perpignan_directions_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Itin√©raires sp√©cifiquement pour Tousalon Perpignan
        Uniquement les conversions contenant "Local actions - Directions"
        """
        directions_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üíá Recherche des conversions TOUSALON PERPIGNAN ITIN√âRAIRES pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Itin√©raires pour Tousalon Perpignan
                is_tousalon_perpignan_directions = any(target_name in conversion_name for target_name in self.TOUSALON_PERPIGNAN_DIRECTIONS_NAMES)
                
                if is_tousalon_perpignan_directions:
                    directions_total += conversions_value
                    logging.info(f"üíá CONVERSION TOUSALON PERPIGNAN ITIN√âRAIRES: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion Tousalon Perpignan Itin√©raires ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Itin√©raires Tousalon Perpignan
            directions_conversions = [conv for conv in all_conversions 
                                   if any(target_name in conv['name'].lower() for target_name in self.TOUSALON_PERPIGNAN_DIRECTIONS_NAMES)]
            
            logging.info(f"üíá Total Itin√©raires Tousalon Perpignan: {directions_total}")
            return directions_total, directions_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions Tousalon Perpignan Itin√©raires pour {customer_id}: {e}")
            return directions_total, all_conversions
    
    def get_tousalon_toulouse_contact_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Contact sp√©cifiquement pour Tousalon Toulouse
        Uniquement les conversions contenant "Appels" et "Clicks to call"
        """
        contact_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üèõÔ∏è Recherche des conversions TOUSALON TOULOUSE CONTACT pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Contact pour Tousalon Toulouse
                is_tousalon_toulouse_contact = any(target_name in conversion_name for target_name in self.TOUSALON_TOULOUSE_CONTACT_NAMES)
                
                if is_tousalon_toulouse_contact:
                    contact_total += conversions_value
                    logging.info(f"üèõÔ∏è CONVERSION TOUSALON TOULOUSE CONTACT: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion Tousalon Toulouse Contact ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Contact Tousalon Toulouse
            contact_conversions = [conv for conv in all_conversions 
                                  if any(target_name in conv['name'].lower() for target_name in self.TOUSALON_TOULOUSE_CONTACT_NAMES)]
            
            logging.info(f"üèõÔ∏è Total Contact Tousalon Toulouse: {contact_total}")
            return contact_total, contact_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions Tousalon Toulouse Contact pour {customer_id}: {e}")
            return contact_total, all_conversions
    
    def get_tousalon_toulouse_directions_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Itin√©raires sp√©cifiquement pour Tousalon Toulouse
        Uniquement les conversions contenant "Itin√©raire" et "Local actions - Directions"
        """
        directions_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üèõÔ∏è Recherche des conversions TOUSALON TOULOUSE ITIN√âRAIRES pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Itin√©raires pour Tousalon Toulouse
                is_tousalon_toulouse_directions = any(target_name in conversion_name for target_name in self.TOUSALON_TOULOUSE_DIRECTIONS_NAMES)
                
                if is_tousalon_toulouse_directions:
                    directions_total += conversions_value
                    logging.info(f"üèõÔ∏è CONVERSION TOUSALON TOULOUSE ITIN√âRAIRES: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion Tousalon Toulouse Itin√©raires ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Itin√©raires Tousalon Toulouse
            directions_conversions = [conv for conv in all_conversions 
                                   if any(target_name in conv['name'].lower() for target_name in self.TOUSALON_TOULOUSE_DIRECTIONS_NAMES)]
            
            logging.info(f"üèõÔ∏è Total Itin√©raires Tousalon Toulouse: {directions_total}")
            return directions_total, directions_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions Tousalon Toulouse Itin√©raires pour {customer_id}: {e}")
            return directions_total, all_conversions
    
    def get_bedroom_contact_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Contact sp√©cifiquement pour Bedroom
        Uniquement les conversions contenant "Call bouton" et "Clicks to call"
        """
        contact_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üõèÔ∏è Recherche des conversions BEDROOM CONTACT pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Contact pour Bedroom
                is_bedroom_contact = any(target_name in conversion_name for target_name in self.BEDROOM_CONTACT_NAMES)
                
                if is_bedroom_contact:
                    contact_total += conversions_value
                    logging.info(f"üõèÔ∏è CONVERSION BEDROOM CONTACT: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion Bedroom Contact ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Contact Bedroom
            contact_conversions = [conv for conv in all_conversions 
                                  if any(target_name in conv['name'].lower() for target_name in self.BEDROOM_CONTACT_NAMES)]
            
            logging.info(f"üõèÔ∏è Total Contact Bedroom: {contact_total}")
            return contact_total, contact_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions Bedroom Contact pour {customer_id}: {e}")
            return contact_total, all_conversions
    
    def get_bedroom_directions_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Itin√©raires sp√©cifiquement pour Bedroom
        Uniquement les conversions contenant "Itin√©raires" et "Local actions - Directions"
        """
        directions_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üõèÔ∏è Recherche des conversions BEDROOM ITIN√âRAIRES pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Itin√©raires pour Bedroom
                is_bedroom_directions = any(target_name in conversion_name for target_name in self.BEDROOM_DIRECTIONS_NAMES)
                
                if is_bedroom_directions:
                    directions_total += conversions_value
                    logging.info(f"üõèÔ∏è CONVERSION BEDROOM ITIN√âRAIRES: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion Bedroom Itin√©raires ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Itin√©raires Bedroom
            directions_conversions = [conv for conv in all_conversions 
                                   if any(target_name in conv['name'].lower() for target_name in self.BEDROOM_DIRECTIONS_NAMES)]
            
            logging.info(f"üõèÔ∏è Total Itin√©raires Bedroom: {directions_total}")
            return directions_total, directions_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions Bedroom Itin√©raires pour {customer_id}: {e}")
            return directions_total, all_conversions
    
    def get_cuisine_plus_perpignan_contact_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Contact sp√©cifiquement pour Cuisine Plus Perpignan
        PAS DE CONVERSIONS CONTACT pour ce client
        """
        contact_total = 0
        all_conversions = []
        
        try:
            logging.info(f"üçΩÔ∏è Cuisine Plus Perpignan - PAS DE CONVERSIONS CONTACT pour le client {customer_id}")
            
            # Pas de conversions contact pour Cuisine Plus Perpignan
            logging.info(f"üçΩÔ∏è Total Contact Cuisine Plus Perpignan: {contact_total} (aucune conversion contact)")
            return contact_total, all_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions Cuisine Plus Perpignan Contact pour {customer_id}: {e}")
            return contact_total, all_conversions
    
    def get_cuisine_plus_perpignan_directions_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Itin√©raires sp√©cifiquement pour Cuisine Plus Perpignan
        Uniquement les conversions contenant "Itin√©raires"
        """
        directions_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üçΩÔ∏è Recherche des conversions CUISINE PLUS PERPIGNAN ITIN√âRAIRES pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Itin√©raires pour Cuisine Plus Perpignan
                is_cuisine_plus_perpignan_directions = any(target_name in conversion_name for target_name in self.CUISINE_PLUS_PERPIGNAN_DIRECTIONS_NAMES)
                
                if is_cuisine_plus_perpignan_directions:
                    directions_total += conversions_value
                    logging.info(f"üçΩÔ∏è CONVERSION CUISINE PLUS PERPIGNAN ITIN√âRAIRES: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion Cuisine Plus Perpignan Itin√©raires ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Itin√©raires Cuisine Plus Perpignan
            directions_conversions = [conv for conv in all_conversions 
                                   if any(target_name in conv['name'].lower() for target_name in self.CUISINE_PLUS_PERPIGNAN_DIRECTIONS_NAMES)]
            
            logging.info(f"üçΩÔ∏è Total Itin√©raires Cuisine Plus Perpignan: {directions_total}")
            return directions_total, directions_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions Cuisine Plus Perpignan Itin√©raires pour {customer_id}: {e}")
            return directions_total, all_conversions
    
    def get_flamme_creation_contact_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Contact sp√©cifiquement pour Flamme&Creation
        Uniquement les conversions contenant "Appels" et "Clicks to call"
        """
        contact_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üî• Recherche des conversions FLAMME&CREATION CONTACT pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Contact pour Flamme&Creation
                is_flamme_creation_contact = any(target_name in conversion_name for target_name in self.FLAMME_CREATION_CONTACT_NAMES)
                
                if is_flamme_creation_contact:
                    contact_total += conversions_value
                    logging.info(f"üî• CONVERSION FLAMME&CREATION CONTACT: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion Flamme&Creation Contact ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Contact Flamme&Creation
            contact_conversions = [conv for conv in all_conversions 
                                  if any(target_name in conv['name'].lower() for target_name in self.FLAMME_CREATION_CONTACT_NAMES)]
            
            logging.info(f"üî• Total Contact Flamme&Creation: {contact_total}")
            return contact_total, contact_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions Flamme&Creation Contact pour {customer_id}: {e}")
            return contact_total, all_conversions
    
    def get_flamme_creation_directions_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Itin√©raires sp√©cifiquement pour Flamme&Creation
        Uniquement les conversions contenant "Itin√©raires" et "Local actions - Directions"
        """
        directions_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üî• Recherche des conversions FLAMME&CREATION ITIN√âRAIRES pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Itin√©raires pour Flamme&Creation
                is_flamme_creation_directions = any(target_name in conversion_name for target_name in self.FLAMME_CREATION_DIRECTIONS_NAMES)
                
                if is_flamme_creation_directions:
                    directions_total += conversions_value
                    logging.info(f"üî• CONVERSION FLAMME&CREATION ITIN√âRAIRES: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion Flamme&Creation Itin√©raires ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Itin√©raires Flamme&Creation
            directions_conversions = [conv for conv in all_conversions 
                                   if any(target_name in conv['name'].lower() for target_name in self.FLAMME_CREATION_DIRECTIONS_NAMES)]
            
            logging.info(f"üî• Total Itin√©raires Flamme&Creation: {directions_total}")
            return directions_total, directions_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions Flamme&Creation Itin√©raires pour {customer_id}: {e}")
            return directions_total, all_conversions
    
    def get_fl_champagne_contact_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Contact sp√©cifiquement pour FL Champagne
        Uniquement les conversions contenant "Appels"
        """
        contact_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üçæ Recherche des conversions FL CHAMPAGNE CONTACT pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Contact pour FL Champagne
                is_fl_champagne_contact = any(target_name in conversion_name for target_name in self.FL_CHAMPAGNE_CONTACT_NAMES)
                
                if is_fl_champagne_contact:
                    contact_total += conversions_value
                    logging.info(f"üçæ CONVERSION FL CHAMPAGNE CONTACT: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion FL Champagne Contact ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Contact FL Champagne
            contact_conversions = [conv for conv in all_conversions 
                                  if any(target_name in conv['name'].lower() for target_name in self.FL_CHAMPAGNE_CONTACT_NAMES)]
            
            logging.info(f"üçæ Total Contact FL Champagne: {contact_total}")
            return contact_total, contact_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions FL Champagne Contact pour {customer_id}: {e}")
            return contact_total, all_conversions
    
    def get_fl_champagne_directions_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Itin√©raires sp√©cifiquement pour FL Champagne
        Uniquement les conversions contenant "Itin√©raires"
        """
        directions_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üçæ Recherche des conversions FL CHAMPAGNE ITIN√âRAIRES pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Itin√©raires pour FL Champagne
                is_fl_champagne_directions = any(target_name in conversion_name for target_name in self.FL_CHAMPAGNE_DIRECTIONS_NAMES)
                
                if is_fl_champagne_directions:
                    directions_total += conversions_value
                    logging.info(f"üçæ CONVERSION FL CHAMPAGNE ITIN√âRAIRES: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion FL Champagne Itin√©raires ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Itin√©raires FL Champagne
            directions_conversions = [conv for conv in all_conversions 
                                   if any(target_name in conv['name'].lower() for target_name in self.FL_CHAMPAGNE_DIRECTIONS_NAMES)]
            
            logging.info(f"üçæ Total Itin√©raires FL Champagne: {directions_total}")
            return directions_total, directions_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions FL Champagne Itin√©raires pour {customer_id}: {e}")
            return directions_total, all_conversions
    
    def get_saint_priest_givors_contact_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Contact sp√©cifiquement pour Saint Priest Givors
        Uniquement les conversions contenant "Appel Givors", "Appel St Priest", "Appels", "Clicks to call" et "CTA"
        """
        contact_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üè∞ Recherche des conversions SAINT PRIEST GIVORS CONTACT pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Contact pour Saint Priest Givors
                is_saint_priest_givors_contact = any(target_name in conversion_name for target_name in self.SAINT_PRIEST_GIVORS_CONTACT_NAMES)
                
                if is_saint_priest_givors_contact:
                    contact_total += conversions_value
                    logging.info(f"üè∞ CONVERSION SAINT PRIEST GIVORS CONTACT: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion Saint Priest Givors Contact ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Contact Saint Priest Givors
            contact_conversions = [conv for conv in all_conversions 
                                  if any(target_name in conv['name'].lower() for target_name in self.SAINT_PRIEST_GIVORS_CONTACT_NAMES)]
            
            logging.info(f"üè∞ Total Contact Saint Priest Givors: {contact_total}")
            return contact_total, contact_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions Saint Priest Givors Contact pour {customer_id}: {e}")
            return contact_total, all_conversions
    
    def get_saint_priest_givors_directions_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Itin√©raires sp√©cifiquement pour Saint Priest Givors
        Uniquement les conversions contenant "Itin√©raire Saint Priest", "Itin√©raire Givors" et "Local actions - Directions"
        """
        directions_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üè∞ Recherche des conversions SAINT PRIEST GIVORS ITIN√âRAIRES pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Itin√©raires pour Saint Priest Givors
                is_saint_priest_givors_directions = any(target_name in conversion_name for target_name in self.SAINT_PRIEST_GIVORS_DIRECTIONS_NAMES)
                
                if is_saint_priest_givors_directions:
                    directions_total += conversions_value
                    logging.info(f"üè∞ CONVERSION SAINT PRIEST GIVORS ITIN√âRAIRES: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion Saint Priest Givors Itin√©raires ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Itin√©raires Saint Priest Givors
            directions_conversions = [conv for conv in all_conversions 
                                   if any(target_name in conv['name'].lower() for target_name in self.SAINT_PRIEST_GIVORS_DIRECTIONS_NAMES)]
            
            logging.info(f"üè∞ Total Itin√©raires Saint Priest Givors: {directions_total}")
            return directions_total, directions_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions Saint Priest Givors Itin√©raires pour {customer_id}: {e}")
            return directions_total, all_conversions
    
    def get_france_literie_annemasse_contact_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Contact sp√©cifiquement pour France Literie Annemasse
        Uniquement les conversions contenant "Appels" et "Clicks to call"
        """
        contact_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üèîÔ∏è Recherche des conversions FRANCE LITERIE ANNEMASSE CONTACT pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Contact pour France Literie Annemasse (uniquement "Appels" et "Clicks to call")
                is_france_literie_annemasse_contact = any(target_name in conversion_name for target_name in self.FRANCE_LITERIE_ANNEMASSE_CONTACT_NAMES)
                
                if is_france_literie_annemasse_contact:
                    contact_total += conversions_value
                    logging.info(f"üèîÔ∏è CONVERSION FRANCE LITERIE ANNEMASSE CONTACT: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion France Literie Annemasse Contact ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Contact France Literie Annemasse
            contact_conversions = [conv for conv in all_conversions 
                                  if any(target_name in conv['name'].lower() for target_name in self.FRANCE_LITERIE_ANNEMASSE_CONTACT_NAMES)]
            
            logging.info(f"üèîÔ∏è Total Contact France Literie Annemasse: {contact_total}")
            return contact_total, contact_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions France Literie Annemasse Contact pour {customer_id}: {e}")
            return contact_total, all_conversions
    
    def get_france_literie_annemasse_directions_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Itin√©raires sp√©cifiquement pour France Literie Annemasse
        Uniquement les conversions contenant "Itin√©raires" et "Local actions - Directions"
        """
        directions_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üèîÔ∏è Recherche des conversions FRANCE LITERIE ANNEMASSE ITIN√âRAIRES pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Itin√©raires pour France Literie Annemasse (uniquement "Itin√©raires" et "Local actions - Directions")
                is_france_literie_annemasse_directions = any(target_name in conversion_name for target_name in self.FRANCE_LITERIE_ANNEMASSE_DIRECTIONS_NAMES)
                
                if is_france_literie_annemasse_directions:
                    directions_total += conversions_value
                    logging.info(f"üèîÔ∏è CONVERSION FRANCE LITERIE ANNEMASSE ITIN√âRAIRES: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion France Literie Annemasse Itin√©raires ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Itin√©raires France Literie Annemasse
            directions_conversions = [conv for conv in all_conversions 
                                   if any(target_name in conv['name'].lower() for target_name in self.FRANCE_LITERIE_ANNEMASSE_DIRECTIONS_NAMES)]
            
            logging.info(f"üèîÔ∏è Total Itin√©raires France Literie Annemasse: {directions_total}")
            return directions_total, directions_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions France Literie Annemasse Itin√©raires pour {customer_id}: {e}")
            return directions_total, all_conversions
    
    def get_fl_antibes_contact_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Contact sp√©cifiquement pour FL Antibes Vallauris
        """
        contact_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üèñÔ∏è Recherche des conversions FL ANTIBES CONTACT pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # üèñÔ∏è LOGS D√âTAILL√âS FL ANTIBES - Debug complet
                logging.info(f"üèñÔ∏è FL ANTIBES DEBUG - Conversion trouv√©e: '{row.segments.conversion_action_name}'")
                logging.info(f"üèñÔ∏è FL ANTIBES DEBUG - metrics.conversions: {row.metrics.conversions}")
                logging.info(f"üèñÔ∏è FL ANTIBES DEBUG - metrics.all_conversions: {row.metrics.all_conversions}")
                
                # Logique sp√©cifique FL Antibes : utiliser UNIQUEMENT les conversions enti√®res
                # Ignorer all_conversions pour √©viter les conversions fractionnaires
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                    logging.info(f"üèñÔ∏è FL ANTIBES DEBUG - Utilisation de metrics.conversions: {conversions_value}")
                else:
                    conversions_value = 0
                    logging.info(f"üèñÔ∏è FL ANTIBES DEBUG - Aucune conversion enti√®re, valeur = 0")
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # Utiliser la logique sp√©cifique FL Antibes avec correspondance pr√©cise pour "cta"
                is_fl_antibes_contact = False
                for target_name in self.FL_ANTIBES_CONTACT_NAMES:
                    if target_name == "cta":
                        # Pour "cta", correspondance exacte ou avec espaces uniquement
                        if conversion_name == "cta" or conversion_name.strip() == "cta":
                            is_fl_antibes_contact = True
                            break
                    else:
                        # Pour les autres, correspondance partielle
                        if target_name in conversion_name:
                            is_fl_antibes_contact = True
                            break
                
                # üèñÔ∏è LOGS D√âTAILL√âS FL ANTIBES - V√©rification des noms de conversions
                logging.info(f"üèñÔ∏è FL ANTIBES DEBUG - Noms recherch√©s: {self.FL_ANTIBES_CONTACT_NAMES}")
                logging.info(f"üèñÔ∏è FL ANTIBES DEBUG - Nom de conversion: '{conversion_name}'")
                logging.info(f"üèñÔ∏è FL ANTIBES DEBUG - Match trouv√©: {is_fl_antibes_contact}")
                
                # Log sp√©cial pour les conversions "cta"
                if "cta" in conversion_name.lower():
                    logging.info(f"üèñÔ∏è FL ANTIBES DEBUG - Conversion CTA d√©tect√©e: '{conversion_name}' (valeur: {conversions_value})")
                    if conversion_name == "cta" or conversion_name.strip() == "cta":
                        logging.info(f"üèñÔ∏è FL ANTIBES DEBUG - ‚úÖ CTA exacte accept√©e")
                    else:
                        logging.info(f"üèñÔ∏è FL ANTIBES DEBUG - ‚ùå CTA partielle rejet√©e (contient CTA mais n'est pas exacte)")
                
                if is_fl_antibes_contact:
                    contact_total += conversions_value
                    logging.info(f"üèñÔ∏è CONVERSION FL ANTIBES CONTACT: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion FL Antibes Contact ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Contact FL Antibes (Appels, CTA, Clicks to call)
            contact_conversions = [conv for conv in all_conversions 
                                 if any(target_name in conv['name'].lower() for target_name in self.FL_ANTIBES_CONTACT_NAMES)]
            
            logging.info(f"üèñÔ∏è Total Contact FL Antibes: {contact_total}")
            logging.info(f"üèñÔ∏è FL ANTIBES R√âSUM√â - Total final: {contact_total}")
            logging.info(f"üèñÔ∏è FL ANTIBES R√âSUM√â - Conversions trouv√©es: {len(contact_conversions)}")
            for conv in contact_conversions:
                logging.info(f"üèñÔ∏è FL ANTIBES R√âSUM√â - {conv['name']}: {conv['conversions']}")
            return contact_total, contact_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions FL Antibes Contact pour {customer_id}: {e}")
            return contact_total, all_conversions
    
    def get_fl_antibes_directions_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Itin√©raires sp√©cifiquement pour FL Antibes Vallauris
        Uniquement "Itin√©raires" et "Local actions - Directions"
        """
        directions_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üèñÔ∏è Recherche des conversions FL ANTIBES ITIN√âRAIRES pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Itin√©raires pour FL Antibes (uniquement "Itin√©raires" et "Local actions - Directions")
                is_fl_antibes_directions = any(target_name in conversion_name for target_name in self.FL_ANTIBES_DIRECTIONS_NAMES)
                
                if is_fl_antibes_directions:
                    directions_total += conversions_value
                    logging.info(f"üèñÔ∏è CONVERSION FL ANTIBES ITIN√âRAIRES: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion FL Antibes Itin√©raires ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Itin√©raires FL Antibes
            directions_conversions = [conv for conv in all_conversions 
                                    if any(target_name in conv['name'].lower() for target_name in self.FL_ANTIBES_DIRECTIONS_NAMES)]
            
            logging.info(f"üèñÔ∏è Total Itin√©raires FL Antibes: {directions_total}")
            return directions_total, directions_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions FL Antibes Itin√©raires pour {customer_id}: {e}")
            return directions_total, all_conversions
    
    
    
    def get_directions_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Itin√©raires (utilise la nouvelle m√©thode)
        """
        contact_total, directions_total, all_conversions = self.get_all_conversions_data(
            customer_id, start_date, end_date
        )
        
        # Filtrer seulement les conversions Itin√©raires
        directions_conversions = [conv for conv in all_conversions 
                                 if any(target_name in conv['name'].lower() for target_name in self.TARGET_DIRECTIONS_NAMES)]
        
        return directions_total, directions_conversions
    
    def get_addario_directions_conversions_data(self, customer_id: str, start_date: str, end_date: str) -> Tuple[int, List[Dict]]:
        """
        R√©cup√®re les donn√©es de conversions Itin√©raires sp√©cifiquement pour Addario
        Uniquement les conversions contenant "Itin√©raires" et "Local actions - Directions"
        """
        directions_total = 0
        all_conversions = []
        
        try:
            # Requ√™te pour r√©cup√©rer TOUTES les conversion actions
            query = f"""
            SELECT
                segments.conversion_action_name,
                segments.conversion_action,
                metrics.all_conversions,
                metrics.conversions
            FROM campaign
            WHERE
                segments.date BETWEEN '{start_date}' AND '{end_date}'
                AND metrics.all_conversions > 0
            """
            
            logging.info(f"üéØ Recherche des conversions ADDARIO ITIN√âRAIRES pour le client {customer_id}")
            
            response = self.auth_service.fetch_report_data(customer_id, query)
            
            for row in response:
                conversion_name = row.segments.conversion_action_name.lower().strip()
                
                # Logique pour g√©rer la diff√©rence entre les m√©triques
                if row.metrics.conversions and row.metrics.conversions > 0:
                    conversions_value = row.metrics.conversions
                elif row.metrics.all_conversions and row.metrics.all_conversions > 0:
                    conversions_value = row.metrics.all_conversions
                else:
                    conversions_value = 0
                
                # Enregistrer toutes les conversions pour debug
                all_conversions.append({
                    'name': row.segments.conversion_action_name,
                    'id': row.segments.conversion_action,
                    'conversions': conversions_value
                })
                
                # V√©rifier si c'est une conversion Itin√©raires pour Addario (uniquement "Itin√©raires" et "Local actions - Directions")
                is_addario_directions = any(target_name in conversion_name for target_name in self.ADDARIO_DIRECTIONS_NAMES)
                
                if is_addario_directions:
                    directions_total += conversions_value
                    logging.info(f"üéØ CONVERSION ADDARIO ITIN√âRAIRES: {row.segments.conversion_action_name} = {conversions_value}")
                else:
                    logging.info(f"‚ö†Ô∏è Conversion Addario ignor√©e: {row.segments.conversion_action_name} = {conversions_value}")
            
            # Filtrer seulement les conversions Itin√©raires Addario
            directions_conversions = [conv for conv in all_conversions 
                                     if any(target_name in conv['name'].lower() for target_name in self.ADDARIO_DIRECTIONS_NAMES)]
            
            logging.info(f"üéØ Total Itin√©raires Addario: {directions_total}")
            return directions_total, directions_conversions
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des conversions Addario pour {customer_id}: {e}")
            return directions_total, all_conversions
    
    def update_contact_conversions_in_sheet(self, client_name: str, month: str, conversions_total: int) -> bool:
        """
        Met √† jour les conversions Contact dans le Google Sheet
        
        Args:
            client_name: Nom du client (onglet)
            month: Mois √† mettre √† jour
            conversions_total: Nombre total de conversions
            
        Returns:
            True si succ√®s, False sinon
        """
        try:
            # V√©rifier que l'onglet existe
            available_sheets = self.sheets_service.get_worksheet_names()
            if client_name not in available_sheets:
                logging.error(f"‚ùå Onglet '{client_name}' non trouv√© dans le Google Sheet")
                return False
            
            # Trouver la ligne du mois
            row_number = self.sheets_service.get_row_for_month(client_name, month)
            if row_number is None:
                logging.error(f"‚ùå Mois '{month}' non trouv√© dans l'onglet '{client_name}'")
                return False
            
            # Trouver la colonne "Contact" (essayer diff√©rentes variantes)
            column_letter = self.sheets_service.get_column_for_metric(client_name, "Contact")
            if column_letter is None:
                column_letter = self.sheets_service.get_column_for_metric(client_name, "contact")
            if column_letter is None:
                logging.error(f"‚ùå Colonne 'Contact' non trouv√©e dans l'onglet '{client_name}'")
                return False
            
            # Mettre √† jour la cellule
            cell_range = f"{column_letter}{row_number}"
            success = self.sheets_service.update_single_cell(client_name, cell_range, conversions_total)
            
            if success:
                logging.info(f"‚úÖ Conversions Contact mises √† jour: {conversions_total} dans {client_name}")
            
            return success
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la mise √† jour Contact dans le Google Sheet: {e}")
            return False
    
    def update_directions_conversions_in_sheet(self, client_name: str, month: str, conversions_total: int) -> bool:
        """
        Met √† jour les conversions Itin√©raires dans le Google Sheet
        
        Args:
            client_name: Nom du client (onglet)
            month: Mois √† mettre √† jour
            conversions_total: Nombre total de conversions
            
        Returns:
            True si succ√®s, False sinon
        """
        try:
            # V√©rifier que l'onglet existe
            available_sheets = self.sheets_service.get_worksheet_names()
            if client_name not in available_sheets:
                logging.error(f"‚ùå Onglet '{client_name}' non trouv√© dans le Google Sheet")
                return False
            
            # Trouver la ligne du mois
            row_number = self.sheets_service.get_row_for_month(client_name, month)
            if row_number is None:
                logging.error(f"‚ùå Mois '{month}' non trouv√© dans l'onglet '{client_name}'")
                return False
            
            # Trouver la colonne "Itin√©raires" (essayer diff√©rentes variantes)
            column_letter = self.sheets_service.get_column_for_metric(client_name, "Itin√©raires")
            if column_letter is None:
                column_letter = self.sheets_service.get_column_for_metric(client_name, "itin√©raires")
            if column_letter is None:
                # Essayer avec "Demande d'itineraires" 
                column_letter = self.sheets_service.get_column_for_metric(client_name, "Demande d'itineraires")
            if column_letter is None:
                # Essayer avec "demande d'itineraires" 
                column_letter = self.sheets_service.get_column_for_metric(client_name, "demande d'itineraires")
            
            if column_letter is None:
                logging.error(f"‚ùå Colonne 'Itin√©raires' non trouv√©e dans l'onglet '{client_name}'")
                return False
            
            # Mettre √† jour la cellule
            cell_range = f"{column_letter}{row_number}"
            success = self.sheets_service.update_single_cell(client_name, cell_range, conversions_total)
            
            if success:
                logging.info(f"‚úÖ Conversions Itin√©raires mises √† jour: {conversions_total} dans {client_name}")
            
            return success
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la mise √† jour Itin√©raires dans le Google Sheet: {e}")
            return False
    
    def scrape_contact_conversions_for_customer(self, customer_id: str, client_name: str, 
                                               start_date: str, end_date: str, month: str) -> Dict[str, Any]:
        """
        Fonction principale pour scraper les conversions Contact d'un client et les ajouter au Google Sheet
        
        Args:
            customer_id: ID du client Google Ads
            client_name: Nom du client (onglet)
            start_date: Date de d√©but
            end_date: Date de fin
            month: Mois √† mettre √† jour
            
        Returns:
            Dictionnaire avec le r√©sultat de l'op√©ration
        """
        try:
            logging.info(f"üéØ D√©but du scraping Contact pour {client_name} (ID: {customer_id})")
            
            # V√©rifier si c'est A.G. Cryolipolyse pour utiliser la logique sp√©cifique
            if customer_id == "9321943301" or client_name == "A.G. Cryolipolyse":
                logging.info(f"üßä Utilisation de la logique sp√©cifique Cryolipolyse pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Contact avec la logique Cryolipolyse
                total_conversions, found_conversions = self.get_cryolipolyse_contact_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "3259500758" or client_name == "Crozatier Dijon":
                logging.info(f"üè™ Utilisation de la logique sp√©cifique Crozatier pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Contact avec la logique Crozatier
                total_conversions, found_conversions = self.get_crozatier_contact_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "1810240249" or client_name == "Denteva":
                logging.info(f"ü¶∑ Utilisation de la logique sp√©cifique Denteva pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Contact avec la logique Denteva
                total_conversions, found_conversions = self.get_denteva_contact_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "5461114350" or client_name == "EvoPro Informatique":
                logging.info(f"üíª Utilisation de la logique sp√©cifique EvoPro pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Contact avec la logique EvoPro
                total_conversions, found_conversions = self.get_evopro_contact_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "5104651305" or client_name == "France Literie Aix":
                logging.info(f"üõèÔ∏è Utilisation de la logique sp√©cifique France Literie Aix pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Contact avec la logique France Literie Aix
                total_conversions, found_conversions = self.get_france_literie_aix_contact_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "7349999845" or client_name == "France Literie Dijon":
                logging.info(f"üè∞ Utilisation de la logique sp√©cifique France Literie Dijon pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Contact avec la logique France Literie Dijon
                total_conversions, found_conversions = self.get_france_literie_dijon_contact_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "7807237268" or client_name == "France Literie Narbonne":
                logging.info(f"üèõÔ∏è Utilisation de la logique sp√©cifique France Literie Narbonne pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Contact avec la logique France Literie Narbonne
                total_conversions, found_conversions = self.get_france_literie_narbonne_contact_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "1226105597" or client_name == "France Literie Perpignan":
                logging.info(f"üè∞ Utilisation de la logique sp√©cifique France Literie Perpignan pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Contact avec la logique France Literie Perpignan
                total_conversions, found_conversions = self.get_france_literie_perpignan_contact_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "4854280249" or client_name == "Kaltea Aubagne":
                logging.info(f"üå°Ô∏è Utilisation de la logique sp√©cifique Kaltea Aubagne pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Contact avec la logique Kaltea Aubagne
                total_conversions, found_conversions = self.get_kaltea_aubagne_contact_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "1189918252" or client_name == "Kaltea Chalon sur Sa√¥ne":
                logging.info(f"üå°Ô∏è Utilisation de la logique sp√©cifique Kaltea Chalon pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Contact avec la logique Kaltea Chalon
                total_conversions, found_conversions = self.get_kaltea_chalon_contact_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "5074336650" or client_name == "Kaltea Lyon Sud":
                logging.info(f"üå°Ô∏è Utilisation de la logique sp√©cifique Kaltea Lyon pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Contact avec la logique Kaltea Lyon
                total_conversions, found_conversions = self.get_kaltea_lyon_contact_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "5901565913" or client_name == "Laserel":
                logging.info(f"üî¨ Utilisation de la logique sp√©cifique Laserel pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Contact avec la logique Laserel
                total_conversions, found_conversions = self.get_laserel_contact_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "4865583978" or client_name == "Star Literie":
                logging.info(f"‚≠ê Utilisation de la logique sp√©cifique Star Literie pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Contact avec la logique Star Literie
                total_conversions, found_conversions = self.get_star_literie_contact_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "3245028529" or client_name == "Tousalon Perpignan":
                logging.info(f"üíá Utilisation de la logique sp√©cifique Tousalon Perpignan pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Contact avec la logique Tousalon Perpignan
                total_conversions, found_conversions = self.get_tousalon_perpignan_contact_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "4913925892" or client_name == "Tousalon Toulouse":
                logging.info(f"üèõÔ∏è Utilisation de la logique sp√©cifique Tousalon Toulouse pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Contact avec la logique Tousalon Toulouse
                total_conversions, found_conversions = self.get_tousalon_toulouse_contact_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "2620320258" or client_name == "Bedroom Perpignan":
                logging.info(f"üõèÔ∏è Utilisation de la logique sp√©cifique Bedroom pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Contact avec la logique Bedroom
                total_conversions, found_conversions = self.get_bedroom_contact_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "9360801546" or client_name == "Cuisine Plus Perpignan":
                logging.info(f"üçΩÔ∏è Utilisation de la logique sp√©cifique Cuisine Plus Perpignan pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Contact avec la logique Cuisine Plus Perpignan (pas de contact)
                total_conversions, found_conversions = self.get_cuisine_plus_perpignan_contact_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "9576529976" or client_name == "Flamme&Creation":
                logging.info(f"üî• Utilisation de la logique sp√©cifique Flamme&Creation pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Contact avec la logique Flamme&Creation
                total_conversions, found_conversions = self.get_flamme_creation_contact_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "1842495793" or client_name == "France Literie Champagne":
                logging.info(f"üçæ Utilisation de la logique sp√©cifique FL Champagne pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Contact avec la logique FL Champagne
                total_conversions, found_conversions = self.get_fl_champagne_contact_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "3511211392" or client_name == "France Literie Saint-Priest & Givors":
                logging.info(f"üè∞ Utilisation de la logique sp√©cifique Saint Priest Givors pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Contact avec la logique Saint Priest Givors
                total_conversions, found_conversions = self.get_saint_priest_givors_contact_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "2744128994" or client_name == "France Literie Annemasse":
                logging.info(f"üèîÔ∏è Utilisation de la logique sp√©cifique France Literie Annemasse pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Contact avec la logique France Literie Annemasse
                total_conversions, found_conversions = self.get_france_literie_annemasse_contact_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "2485486745" or client_name == "France Literie Antibes Vallauris":
                logging.info(f"üèñÔ∏è Utilisation de la logique sp√©cifique FL Antibes Vallauris pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Contact avec la logique FL Antibes Vallauris
                total_conversions, found_conversions = self.get_fl_antibes_contact_conversions_data(
                    customer_id, start_date, end_date
                )
            else:
                # R√©cup√©rer les donn√©es de conversions Contact avec la logique standard
                total_conversions, found_conversions = self.get_contact_conversions_data(
                    customer_id, start_date, end_date
                )
            
            # Mettre √† jour le Google Sheet
            success = self.update_contact_conversions_in_sheet(client_name, month, total_conversions)
            
            if success:
                logging.info(f"üéâ Scraping Contact termin√© avec succ√®s pour {client_name}")
                return {
                    'success': True,
                    'total_conversions': total_conversions,
                    'found_conversions': found_conversions
                }
            else:
                logging.error(f"‚ùå √âchec de la mise √† jour du Google Sheet pour {client_name}")
                return {
                    'success': False,
                    'total_conversions': total_conversions,
                    'found_conversions': found_conversions
                }
        
        except Exception as e:
            logging.error(f"‚ùå Erreur lors du scraping Contact pour {client_name}: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def scrape_directions_conversions_for_customer(self, customer_id: str, client_name: str,
                                                  start_date: str, end_date: str, month: str) -> Dict[str, Any]:
        """
        Fonction principale pour scraper les conversions Itin√©raires d'un client et les ajouter au Google Sheet
        
        Args:
            customer_id: ID du client Google Ads
            client_name: Nom du client (onglet)
            start_date: Date de d√©but
            end_date: Date de fin
            month: Mois √† mettre √† jour
            
        Returns:
            Dictionnaire avec le r√©sultat de l'op√©ration
        """
        try:
            logging.info(f"üéØ D√©but du scraping Itin√©raires pour {client_name} (ID: {customer_id})")
            
            # V√©rifier si c'est Addario pour utiliser la logique sp√©cifique
            if customer_id == "1513412386" or client_name == "Addario":
                logging.info(f"üéØ Utilisation de la logique sp√©cifique Addario pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Itin√©raires avec la logique Addario
                total_conversions, found_conversions = self.get_addario_directions_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "1810240249" or client_name == "Denteva":
                logging.info(f"ü¶∑ Utilisation de la logique sp√©cifique Denteva pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Itin√©raires avec la logique Denteva
                total_conversions, found_conversions = self.get_denteva_directions_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "5461114350" or client_name == "EvoPro Informatique":
                logging.info(f"üíª Utilisation de la logique sp√©cifique EvoPro pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Itin√©raires avec la logique EvoPro
                total_conversions, found_conversions = self.get_evopro_directions_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "5104651305" or client_name == "France Literie Aix":
                logging.info(f"üõèÔ∏è Utilisation de la logique sp√©cifique France Literie Aix pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Itin√©raires avec la logique France Literie Aix
                total_conversions, found_conversions = self.get_france_literie_aix_directions_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "7349999845" or client_name == "France Literie Dijon":
                logging.info(f"üè∞ Utilisation de la logique sp√©cifique France Literie Dijon pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Itin√©raires avec la logique France Literie Dijon
                total_conversions, found_conversions = self.get_france_literie_dijon_directions_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "7807237268" or client_name == "France Literie Narbonne":
                logging.info(f"üèõÔ∏è Utilisation de la logique sp√©cifique France Literie Narbonne pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Itin√©raires avec la logique France Literie Narbonne
                total_conversions, found_conversions = self.get_france_literie_narbonne_directions_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "1226105597" or client_name == "France Literie Perpignan":
                logging.info(f"üè∞ Utilisation de la logique sp√©cifique France Literie Perpignan pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Itin√©raires avec la logique France Literie Perpignan
                total_conversions, found_conversions = self.get_france_literie_perpignan_directions_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "4854280249" or client_name == "Kaltea Aubagne":
                logging.info(f"üå°Ô∏è Utilisation de la logique sp√©cifique Kaltea Aubagne pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Itin√©raires avec la logique Kaltea Aubagne
                total_conversions, found_conversions = self.get_kaltea_aubagne_directions_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "1189918252" or client_name == "Kaltea Chalon sur Sa√¥ne":
                logging.info(f"üå°Ô∏è Utilisation de la logique sp√©cifique Kaltea Chalon pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Itin√©raires avec la logique Kaltea Chalon
                total_conversions, found_conversions = self.get_kaltea_chalon_directions_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "5074336650" or client_name == "Kaltea Lyon Sud":
                logging.info(f"üå°Ô∏è Utilisation de la logique sp√©cifique Kaltea Lyon pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Itin√©raires avec la logique Kaltea Lyon
                total_conversions, found_conversions = self.get_kaltea_lyon_directions_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "5901565913" or client_name == "Laserel":
                logging.info(f"üî¨ Utilisation de la logique sp√©cifique Laserel pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Itin√©raires avec la logique Laserel
                total_conversions, found_conversions = self.get_laserel_directions_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "4865583978" or client_name == "Star Literie":
                logging.info(f"‚≠ê Utilisation de la logique sp√©cifique Star Literie pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Itin√©raires avec la logique Star Literie
                total_conversions, found_conversions = self.get_star_literie_directions_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "3245028529" or client_name == "Tousalon Perpignan":
                logging.info(f"üíá Utilisation de la logique sp√©cifique Tousalon Perpignan pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Itin√©raires avec la logique Tousalon Perpignan
                total_conversions, found_conversions = self.get_tousalon_perpignan_directions_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "4913925892" or client_name == "Tousalon Toulouse":
                logging.info(f"üèõÔ∏è Utilisation de la logique sp√©cifique Tousalon Toulouse pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Itin√©raires avec la logique Tousalon Toulouse
                total_conversions, found_conversions = self.get_tousalon_toulouse_directions_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "2620320258" or client_name == "Bedroom Perpignan":
                logging.info(f"üõèÔ∏è Utilisation de la logique sp√©cifique Bedroom pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Itin√©raires avec la logique Bedroom
                total_conversions, found_conversions = self.get_bedroom_directions_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "9360801546" or client_name == "Cuisine Plus Perpignan":
                logging.info(f"üçΩÔ∏è Utilisation de la logique sp√©cifique Cuisine Plus Perpignan pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Itin√©raires avec la logique Cuisine Plus Perpignan
                total_conversions, found_conversions = self.get_cuisine_plus_perpignan_directions_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "9576529976" or client_name == "Flamme&Creation":
                logging.info(f"üî• Utilisation de la logique sp√©cifique Flamme&Creation pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Itin√©raires avec la logique Flamme&Creation
                total_conversions, found_conversions = self.get_flamme_creation_directions_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "1842495793" or client_name == "France Literie Champagne":
                logging.info(f"üçæ Utilisation de la logique sp√©cifique FL Champagne pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Itin√©raires avec la logique FL Champagne
                total_conversions, found_conversions = self.get_fl_champagne_directions_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "3511211392" or client_name == "France Literie Saint-Priest & Givors":
                logging.info(f"üè∞ Utilisation de la logique sp√©cifique Saint Priest Givors pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Itin√©raires avec la logique Saint Priest Givors
                total_conversions, found_conversions = self.get_saint_priest_givors_directions_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "2744128994" or client_name == "France Literie Annemasse":
                logging.info(f"üèîÔ∏è Utilisation de la logique sp√©cifique France Literie Annemasse pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Itin√©raires avec la logique France Literie Annemasse
                total_conversions, found_conversions = self.get_france_literie_annemasse_directions_conversions_data(
                    customer_id, start_date, end_date
                )
            elif customer_id == "2485486745" or client_name == "France Literie Antibes Vallauris":
                logging.info(f"üèñÔ∏è Utilisation de la logique sp√©cifique FL Antibes Vallauris pour {client_name}")
                # R√©cup√©rer les donn√©es de conversions Itin√©raires avec la logique FL Antibes Vallauris
                total_conversions, found_conversions = self.get_fl_antibes_directions_conversions_data(
                    customer_id, start_date, end_date
                )
            else:
                # R√©cup√©rer les donn√©es de conversions Itin√©raires avec la logique standard
                total_conversions, found_conversions = self.get_directions_conversions_data(
                    customer_id, start_date, end_date
                )
            
            # Mettre √† jour le Google Sheet
            success = self.update_directions_conversions_in_sheet(client_name, month, total_conversions)
            
            if success:
                logging.info(f"üéâ Scraping Itin√©raires termin√© avec succ√®s pour {client_name}")
                return {
                    'success': True,
                    'total_conversions': total_conversions,
                    'found_conversions': found_conversions
                }
            else:
                logging.error(f"‚ùå √âchec de la mise √† jour du Google Sheet pour {client_name}")
                return {
                    'success': False,
                    'total_conversions': total_conversions,
                    'found_conversions': found_conversions
                }
        
        except Exception as e:
            logging.error(f"‚ùå Erreur lors du scraping Itin√©raires pour {client_name}: {e}")
            return {
                'success': False,
                'error': str(e)
            }
