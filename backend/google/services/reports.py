"""
Service de rapports Google Ads - Gestion des m√©triques virtuelles et export
"""

import logging
from typing import Dict, List, Any, Tuple
from collections import defaultdict
from io import StringIO
import csv

from backend.google.services.authentication import GoogleAdsAuthService

class GoogleAdsReportsService:
    """Service pour g√©rer les rapports et m√©triques Google Ads"""
    
    def __init__(self):
        self.auth_service = GoogleAdsAuthService()
        
        # Mapping des noms de m√©triques pour l'affichage
        self.metric_names = {
            "metrics.impressions": "Impressions",
            "metrics.clicks": "Clics",
            "metrics.ctr": "CTR",
            "metrics.average_cpc": "CPC moyen (‚Ç¨)",
            "metrics.conversions": "Conversions",
            "metrics.cost_micros": "Co√ªt (‚Ç¨)",
            "metrics.conversions_from_interactions_rate": "Taux de conversion",
            "metrics.cost_per_conversion": "Co√ªt par conversion",
            "metrics.conversions_value": "Valeur de conversion",
            "metrics.video_views": "Vues de vid√©o",
            "metrics.video_view_rate": "Taux de vue de vid√©o",
            "metrics.phone_calls": "Appels t√©l√©phoniques"
        }
    
    def get_campaign_data(self, customer_id: str, start_date: str, end_date: str, 
                         channel_filter: List[str] = None) -> List:
        """
        R√©cup√®re les donn√©es de campagne pour un client donn√©
        
        Args:
            customer_id: ID du client Google Ads
            start_date: Date de d√©but (YYYY-MM-DD)
            end_date: Date de fin (YYYY-MM-DD)
            channel_filter: Liste des canaux √† inclure
            
        Returns:
            Liste des batches de r√©sultats
        """
        if channel_filter is None:
            channel_filter = ["SEARCH", "PERFORMANCE_MAX", "DISPLAY"]
        
        # M√©triques de base n√©cessaires pour les calculs
        base_metrics = [
            "metrics.impressions",
            "metrics.clicks", 
            "metrics.ctr",
            "metrics.average_cpc",
            "metrics.cost_micros",
            "metrics.conversions",
            "metrics.phone_calls"
        ]
        
        select_fields = [
            "campaign.advertising_channel_type",
            "campaign.name"
        ] + base_metrics

        query = f"""
        SELECT
            {', '.join(select_fields)}
        FROM campaign
        WHERE
            segments.date BETWEEN '{start_date}' AND '{end_date}'
            AND campaign.advertising_channel_type IN ({','.join([f"'{c}'" for c in channel_filter])})
        """

        logging.info(f"üîç R√©cup√©ration des donn√©es de campagne pour {customer_id}")
        logging.info(f"üìÖ P√©riode: {start_date} √† {end_date}")
        logging.info(f"üìä Canaux: {channel_filter}")
        
        try:
            response = self.auth_service.fetch_report_data(customer_id, query)
            response_list = list(response)  # Convertir en liste pour pouvoir la r√©utiliser
            
            # Avec search(), les donn√©es sont directement dans response_list, pas dans .results
            total_results = len(response_list) if response_list else 0
            logging.info(f"üìà {total_results} r√©sultats r√©cup√©r√©s")
            
            return response_list
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des donn√©es de campagne: {e}")
            raise
    
    def calculate_channel_specific_metrics(self, response_data: List, selected_metrics: List[str]) -> Dict[str, Any]:
        """
        Calcule les m√©triques sp√©cialis√©es par canal √† partir des donn√©es brutes
        
        Args:
            response_data: Donn√©es de r√©ponse de l'API Google Ads
            selected_metrics: Liste des m√©triques s√©lectionn√©es
            
        Returns:
            Dictionnaire des m√©triques virtuelles calcul√©es
        """
        # Grouper les donn√©es par type de canal
        channel_data = {
            'PERFORMANCE_MAX': {'clicks': 0, 'impressions': 0, 'cost_micros': 0, 'cpc_sum': 0, 'cpc_count': 0, 'conversions': 0, 'phone_calls': 0},
            'SEARCH': {'clicks': 0, 'impressions': 0, 'cost_micros': 0, 'cpc_sum': 0, 'cpc_count': 0, 'conversions': 0, 'phone_calls': 0},
            'DISPLAY': {'clicks': 0, 'impressions': 0, 'cost_micros': 0, 'cpc_sum': 0, 'cpc_count': 0, 'conversions': 0, 'phone_calls': 0}
        }
        
        total_data = {'clicks': 0, 'impressions': 0, 'ctr_sum': 0, 'ctr_count': 0, 'cpc_sum': 0, 'cpc_count': 0}
        
        # Debug : compter le nombre de lignes trait√©es
        total_rows = 0
        channels_found = set()
        
        # Collecter les donn√©es par canal
        # Avec search(), les donn√©es sont directement dans response_data, pas dans .results
        for row in response_data:
            total_rows += 1
            channel = row.campaign.advertising_channel_type.name
            channels_found.add(channel)
            
            # Log des d√©tails pour les premi√®res lignes
            if total_rows <= 3:
                logging.info(f"üìä Ligne {total_rows}: Channel={channel}, Clicks={row.metrics.clicks}, Impressions={row.metrics.impressions}, Cost={row.metrics.cost_micros}")
            
            if channel in channel_data:
                channel_data[channel]['clicks'] += row.metrics.clicks or 0
                channel_data[channel]['impressions'] += row.metrics.impressions or 0
                channel_data[channel]['cost_micros'] += row.metrics.cost_micros or 0
                channel_data[channel]['conversions'] += row.metrics.conversions or 0
                channel_data[channel]['phone_calls'] += row.metrics.phone_calls or 0
                
                if row.metrics.average_cpc is not None:
                    channel_data[channel]['cpc_sum'] += row.metrics.average_cpc
                    channel_data[channel]['cpc_count'] += 1
            else:
                logging.warning(f"‚ö†Ô∏è Canal non reconnu: {channel}")
            
            # Totaux globaux
            total_data['clicks'] += row.metrics.clicks or 0
            total_data['impressions'] += row.metrics.impressions or 0
            
            if row.metrics.ctr is not None:
                total_data['ctr_sum'] += row.metrics.ctr
                total_data['ctr_count'] += 1
                
            if row.metrics.average_cpc is not None:
                total_data['cpc_sum'] += row.metrics.average_cpc
                total_data['cpc_count'] += 1
        
        # Log des r√©sultats de debug
        logging.info(f"üìä Nombre total de lignes trait√©es: {total_rows}")
        logging.info(f"üìà Canaux trouv√©s: {channels_found}")
        logging.info(f"üí∞ Donn√©es par canal: {channel_data}")
        logging.info(f"üéØ Totaux globaux: {total_data}")
        
        # Calculer les m√©triques virtuelles
        virtual_metrics = {}
        
        # M√©triques Perfmax
        perfmax = channel_data['PERFORMANCE_MAX']
        virtual_metrics['metrics.clicks_perfmax'] = perfmax['clicks']
        virtual_metrics['metrics.impressions_perfmax'] = perfmax['impressions']
        virtual_metrics['metrics.cost_perfmax'] = round(perfmax['cost_micros'] / 1e6, 2)
        virtual_metrics['metrics.average_cpc_perfmax'] = round(perfmax['cost_micros'] / 1e6 / perfmax['clicks'], 2) if perfmax['clicks'] > 0 else 0
        
        # M√©triques Search
        search = channel_data['SEARCH']
        virtual_metrics['metrics.clicks_search'] = search['clicks']
        virtual_metrics['metrics.impressions_search'] = search['impressions']
        virtual_metrics['metrics.cost_search'] = round(search['cost_micros'] / 1e6, 2)
        virtual_metrics['metrics.average_cpc_search'] = round(search['cost_micros'] / 1e6 / search['clicks'], 2) if search['clicks'] > 0 else 0
        
        # M√©triques Display
        display = channel_data['DISPLAY']
        virtual_metrics['metrics.clicks_display'] = display['clicks']
        virtual_metrics['metrics.impressions_display'] = display['impressions']
        virtual_metrics['metrics.cost_display'] = round(display['cost_micros'] / 1e6, 2)
        virtual_metrics['metrics.average_cpc_display'] = round(display['cost_micros'] / 1e6 / display['clicks'], 2) if display['clicks'] > 0 else 0
        
        # M√©triques globales
        virtual_metrics['metrics.total_clicks'] = total_data['clicks']
        virtual_metrics['metrics.impressions'] = total_data['impressions']
        virtual_metrics['metrics.ctr'] = f"{(total_data['ctr_sum'] / total_data['ctr_count']):.2%}" if total_data['ctr_count'] > 0 else "0.00%"
        
        # CPC global = co√ªt total / clics totaux
        total_cost = sum(channel_data[ch]['cost_micros'] for ch in channel_data)
        virtual_metrics['metrics.average_cpc'] = round(total_cost / 1e6 / total_data['clicks'], 2) if total_data['clicks'] > 0 else 0
        
        # Co√ªt total en euros
        virtual_metrics['metrics.cost_micros'] = round(total_cost / 1e6, 2)
        
        # Conversions totales
        total_conversions = sum(channel_data[ch]['conversions'] for ch in channel_data)
        total_phone_calls = sum(channel_data[ch]['phone_calls'] for ch in channel_data)
        
        virtual_metrics['metrics.conversions'] = total_conversions
        virtual_metrics['metrics.phone_calls'] = total_phone_calls
        
        return virtual_metrics
    
    def process_virtual_metrics_data(self, response_data: List, selected_metrics: List[str]) -> Tuple[List[str], List[List], List[List]]:
        """
        Traite les donn√©es en calculant les m√©triques virtuelles pour le format vertical
        
        Args:
            response_data: Donn√©es de r√©ponse de l'API
            selected_metrics: Liste des m√©triques s√©lectionn√©es
            
        Returns:
            Tuple (headers, data_rows, csv_data)
        """
        # Noms fran√ßais des m√©triques
        metric_names = {
            "metrics.clicks_perfmax": "Clics Perfmax",
            "metrics.impressions_perfmax": "Impressions Perfmax", 
            "metrics.average_cpc_perfmax": "CPC Perfmax (‚Ç¨)",
            "metrics.cost_perfmax": "Co√ªt Perfmax (‚Ç¨)",
            "metrics.clicks_search": "Clics Search",
            "metrics.impressions_search": "Impressions Search",
            "metrics.average_cpc_search": "CPC Search (‚Ç¨)", 
            "metrics.cost_search": "Co√ªt Search (‚Ç¨)",
            "metrics.clicks_display": "Clics Display",
            "metrics.impressions_display": "Impressions Display",
            "metrics.average_cpc_display": "CPC Display (‚Ç¨)",
            "metrics.cost_display": "Co√ªt Display (‚Ç¨)",
            "metrics.total_clicks": "Total Clics",
            "metrics.ctr": "CTR",
            "metrics.impressions": "Impressions",
            "metrics.average_cpc": "CPC moyen (‚Ç¨)",
            "metrics.cost_micros": "Co√ªt Total (‚Ç¨)",
            "metrics.conversions": "Conversions",
            "metrics.phone_calls": "Appels t√©l√©phoniques"
        }
        
        # Calculer toutes les m√©triques virtuelles
        virtual_metrics = self.calculate_channel_specific_metrics(response_data, selected_metrics)
        
        # Cr√©er une "campagne virtuelle" avec toutes les donn√©es
        campaign_name = "Donn√©es Globales"
        
        # Headers : ["M√©trique", "Campagne"]  
        headers = ["M√©trique", campaign_name]
        
        # Data rows : Une ligne par m√©trique s√©lectionn√©e
        data_rows = []
        csv_data = []
        
        for metric in selected_metrics:
            metric_label = metric_names.get(metric, metric)
            value = virtual_metrics.get(metric, "0")
            
            row_data = [metric_label, value]
            data_rows.append(row_data)
            csv_data.append(row_data)
        
        return headers, data_rows, csv_data
    
    def calculate_sheet_metrics_from_ads_data(self, virtual_metrics: Dict[str, Any], selected_metrics: List[str]) -> Dict[str, Any]:
        """
        Convertit les m√©triques calcul√©es de Google Ads vers le format du Google Sheet
        
        Args:
            virtual_metrics: Donn√©es calcul√©es depuis Google Ads
            selected_metrics: Liste des m√©triques s√©lectionn√©es par l'utilisateur
        
        Returns:
            Dictionnaire avec seulement les m√©triques s√©lectionn√©es
        """
        # Mapping complet des m√©triques virtuelles vers les noms du Google Sheet
        metrics_mapping = {
            "metrics.cost_micros": "Cout Google ADS",
            "metrics.clicks_search": "Clics search", 
            "metrics.impressions_search": "Impressions Search",
            "metrics.average_cpc_search": "CPC Search",
            "metrics.clicks_perfmax": "Clics Perf Max",
            "metrics.impressions_perfmax": "Impressions Perf Max", 
            "metrics.clicks_display": "Clics Display",
            "metrics.impressions_display": "Impressions Display",
            "metrics.average_cpc_display": "CPC Display",
            "metrics.cost_display": "Cout Display",
            "metrics.cost_search": "Cout Search",
            "metrics.cost_perfmax": "Cout PM",
            "metrics.total_clicks": "Total Clic",
            "metrics.impressions": "Total Impressions",
            "metrics.average_cpc": "Total CPC moyen",
            "metrics.ctr": "CTR Google"
        }
        
        # Ne retourner que les m√©triques s√©lectionn√©es par l'utilisateur
        result = {}
        
        for selected_metric in selected_metrics:
            if selected_metric in metrics_mapping:
                sheet_metric_name = metrics_mapping[selected_metric]
                metric_value = virtual_metrics.get(selected_metric, 0)
                result[sheet_metric_name] = metric_value
                logging.info(f"üéØ M√©trique s√©lectionn√©e: {selected_metric} -> {sheet_metric_name} = {metric_value}")
            else:
                logging.warning(f"‚ö†Ô∏è M√©trique non mapp√©e: {selected_metric}")
        
        return result
    
    def write_csv_from_data(self, headers: List[str], csv_data: List[List]) -> StringIO:
        """
        Cr√©e un CSV √† partir de donn√©es d√©j√† format√©es
        
        Args:
            headers: En-t√™tes du CSV
            csv_data: Donn√©es √† √©crire
            
        Returns:
            StringIO contenant le CSV
        """
        output = StringIO()
        writer = csv.writer(output)
        
        # √âcrire les headers
        writer.writerow(headers)
        
        # √âcrire les donn√©es
        for row in csv_data:
            writer.writerow(row)
        
        output.seek(0)
        return output 