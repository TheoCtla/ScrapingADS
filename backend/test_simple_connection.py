#!/usr/bin/env python3
"""
Test simple de connexion Google Ads
"""

import sys
import os

# Ajouter le r√©pertoire backend au path
sys.path.append('/Users/theocatala/Desktop/scrappingRapport/backend')

def test_google_ads_basic():
    """Test basique de connexion Google Ads"""
    
    print("üîç TEST SIMPLE GOOGLE ADS")
    print("=" * 40)
    print()
    
    try:
        from google.ads.googleads.client import GoogleAdsClient
        from google.ads.googleads.errors import GoogleAdsException
        print("‚úÖ Import Google Ads r√©ussi")
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False
    
    # Test 1: Initialisation
    print("\nüß™ Test 1: Initialisation du client...")
    try:
        config_path = '/Users/theocatala/Desktop/scrappingRapport/backend/config/google-ads.yaml'
        client = GoogleAdsClient.load_from_storage(config_path)
        print("‚úÖ Client initialis√©")
        print(f"   Login Customer ID: {client.login_customer_id}")
    except Exception as e:
        print(f"‚ùå Erreur d'initialisation: {e}")
        return False
    
    # Test 2: Ancien client (qui fonctionne)
    print("\nüß™ Test 2: Test avec un ancien client...")
    try:
        ga_service = client.get_service("GoogleAdsService")
        query = "SELECT customer.id FROM customer LIMIT 1"
        response = ga_service.search(customer_id="9321943301", query=query)  # A.G. Cryolipolyse
        results = list(response)
        
        if results:
            print("‚úÖ Ancien client fonctionne")
        else:
            print("‚ö†Ô∏è Ancien client: Aucune donn√©e")
            
    except Exception as e:
        print(f"‚ùå Ancien client √©choue: {e}")
    
    # Test 3: Nouveau client probl√©matique
    print("\nüß™ Test 3: Test avec Bedroom Perpignan...")
    try:
        query = "SELECT customer.id FROM customer LIMIT 1"
        response = ga_service.search(customer_id="2620320258", query=query)  # Bedroom Perpignan
        results = list(response)
        
        if results:
            print("‚úÖ Bedroom Perpignan fonctionne maintenant !")
            return True
        else:
            print("‚ö†Ô∏è Bedroom Perpignan: Aucune donn√©e")
            
    except GoogleAdsException as ex:
        error_code = ex.error.code().name if hasattr(ex.error, 'code') else 'UNKNOWN'
        error_message = ex.failure.errors[0].message if ex.failure.errors else str(ex)
        
        print(f"‚ùå Bedroom Perpignan √©choue encore")
        print(f"   Code: {error_code}")
        print(f"   Message: {error_message}")
        
        if "Channel deallocated" in error_message:
            print("\nüîç DIAGNOSTIC:")
            print("   L'erreur 'Channel deallocated!' persiste")
            print("   CAUSES POSSIBLES:")
            print("   1. Le nouveau token n'est pas d√©ploy√© sur Render")
            print("   2. Le compte client n√©cessite une approbation sp√©ciale")
            print("   3. Probl√®me de configuration gRPC")
            print("   4. Le compte client n'est pas accessible")
            
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {e}")
    
    return False

if __name__ == "__main__":
    success = test_google_ads_basic()
    
    if not success:
        print("\nüí° RECOMMANDATIONS:")
        print("1. V√©rifiez que Render a bien red√©ploy√© avec le nouveau token")
        print("2. Attendez 5-10 minutes pour que le d√©ploiement soit complet")
        print("3. V√©rifiez les logs Render pour des erreurs de d√©ploiement")
        print("4. Le compte client pourrait n√©cessiter une approbation sp√©ciale")
        print("5. Essayez de r√©g√©n√©rer le token OAuth avec tous les scopes n√©cessaires")
